{
  "stats": {
    "suites": 19,
    "tests": 112,
    "passes": 112,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-30T13:17:09.101Z",
    "end": "2023-09-30T13:17:34.491Z",
    "duration": 25390,
    "testsRegistered": 112,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d3fcc28f-b79c-47e5-8988-d37deb1315c1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 2013,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.timeout(5000);\n// Set Up Bootstrap app instance as a separate process (because it isnt a module yet)\n// Rather than using ipc messages, we could pass command line params...\ncreateBootstrapApp();\n// Set up DHT Bootstrap\ncreateDHTBootstrap();\n// wait for it to init\nsetTimeout(() => {\n  done();\n}, 2000);",
          "err": {},
          "uuid": "93f15307-ffca-439f-ba09-f68c6b9d6a36",
          "parentUUID": "d3fcc28f-b79c-47e5-8988-d37deb1315c1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "",
          "err": {},
          "uuid": "b9e53658-dc69-4af4-b32b-4031b9996a82",
          "parentUUID": "d3fcc28f-b79c-47e5-8988-d37deb1315c1",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "destroyBootstrapApp();\ndestroyDHTBootstrap();\ntry {\n  fs.unlinkSync(databasePath);\n} catch {\n  console.log('No test database to delete');\n}\n// It's not great but some of the tests can hang...\n// process.exit();",
          "err": {},
          "uuid": "0daf604d-b73d-4ccc-a782-020ae62dac1b",
          "parentUUID": "d3fcc28f-b79c-47e5-8988-d37deb1315c1",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "",
          "err": {},
          "uuid": "0a5a972f-9035-4523-bd62-bbae6c5bc9ad",
          "parentUUID": "d3fcc28f-b79c-47e5-8988-d37deb1315c1",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "da7b88ab-e6c2-4ca6-b43b-8006fd3ece18",
          "title": "App Initialisation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should initialise the application without errors",
              "fullTitle": "App Initialisation Tests should initialise the application without errors",
              "timedOut": false,
              "duration": 1073,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000);\nconst options = {\n  port: 9091,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Init Test Node',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nsetTimeout(() => {\n  testApp.shutdown();\n  done();\n}, 1000);",
              "err": {},
              "uuid": "e2c104dd-be64-47cf-982e-05480c589c48",
              "parentUUID": "da7b88ab-e6c2-4ca6-b43b-8006fd3ece18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should connect to bootstrap node",
              "fullTitle": "App Initialisation Tests should connect to bootstrap node",
              "timedOut": false,
              "duration": 3057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000);\nconst options = {\n  port: 9092,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Bootstrap Test Node',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nsetTimeout(() => {\n  const cache = testApp.client.getCache();\n  expect(cache).to.be.a('Map');\n  expect(cache.size).to.equal(1);\n  const [value] = [...cache.values()];\n  expect(value).to.be.an('object');\n  expect(value.lastAddress).to.be.an('object');\n  expect(value.lastAddress.port).to.equal(9090);\n  testApp.shutdown();\n  done();\n}, 3000);",
              "err": {},
              "uuid": "d38cc487-8fc3-4c18-bd16-65f15ad590e2",
              "parentUUID": "da7b88ab-e6c2-4ca6-b43b-8006fd3ece18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2c104dd-be64-47cf-982e-05480c589c48",
            "d38cc487-8fc3-4c18-bd16-65f15ad590e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4130,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c477b5b2-7ab6-4f80-b022-eb53ec3f95c8",
          "title": "App User Session Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new anon user account for headless mode",
              "fullTitle": "App User Session Tests should create a new anon user account for headless mode",
              "timedOut": false,
              "duration": 1054,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\nconst options = {\n  port: 9091,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'UserNode1',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\n// expect\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.type).to.equal('userProfile');\nexpect(profile.userObject).to.be.an('object');\nexpect(profile.userObject.type).to.equal('user');\nsetTimeout(() => {\n  testApp.shutdown();\n  done();\n}, 1000);",
              "err": {},
              "uuid": "163f4dfe-4580-400b-95bd-9ab0133d057e",
              "parentUUID": "c477b5b2-7ab6-4f80-b022-eb53ec3f95c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login an existing user account with the correct password",
              "fullTitle": "App User Session Tests should login an existing user account with the correct password",
              "timedOut": false,
              "duration": 1129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\n// inserting the test user profile into the database\ninsertUserProfile();\n// logging in with the test user profile\nconst options = {\n  port: 9095,\n  interface: 'none',\n  dbname: databasePath,\n  user: 'H1CtoVRCKP6c9bSLnGxnviqmiNqPJ2od46jD2it40aQ=',\n  secret: 'password',\n  name: 'UserNode2',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nsetTimeout(() => {\n  const profile = testApp.client.getProfile();\n  expect(profile).to.be.an('object');\n  expect(profile.type).to.equal('userProfile');\n  expect(profile.key).to.equal('H1CtoVRCKP6c9bSLnGxnviqmiNqPJ2od46jD2it40aQ=');\n  testApp.shutdown();\n  done();\n}, 1000);",
              "err": {},
              "uuid": "cf844b86-129f-47c6-b861-80d9deee9b53",
              "parentUUID": "c477b5b2-7ab6-4f80-b022-eb53ec3f95c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not login an existing user account with the incorrect password",
              "fullTitle": "App User Session Tests should not login an existing user account with the incorrect password",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const options = {\n  port: 9096,\n  interface: 'none',\n  dbname: databasePath,\n  user: 'H1CtoVRCKP6c9bSLnGxnviqmiNqPJ2od46jD2it40aQ=',\n  secret: '1234',\n  name: 'UserNode3',\n};\nconst testApp = new TestApp();\n// This should throw an error, but it doesnt percolate up to here.\n// Something to do with async zalgo...\ntestApp.init(options);\n// expect(() => testApp.init(options)).to.throw(Error);\n// However, this error is registered for some reason\nexpect(() => testApp.cache.getProfile()).to.throw(Error);\ntestApp.shutdown();\ndone();",
              "err": {},
              "uuid": "b556e6f3-4e22-4bb3-8d05-a3730be8a0dc",
              "parentUUID": "c477b5b2-7ab6-4f80-b022-eb53ec3f95c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not login a non-existent user account",
              "fullTitle": "App User Session Tests should not login a non-existent user account",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const options = {\n  port: 9097,\n  interface: 'none',\n  dbname: databasePath,\n  user: 'deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdead',\n  secret: 'passwordsaregood',\n  name: 'UserNode3',\n};\nconst testApp = new TestApp();\n// expect an error...\n// expect(() => testApp.init(options)).to.throw(Error);\ntestApp.init(options);\nexpect(() => testApp.cache.getProfile()).to.throw(Error);\ntestApp.shutdown();\ndone();",
              "err": {},
              "uuid": "3a1b9a02-570d-4630-aac2-c0ff810808b7",
              "parentUUID": "c477b5b2-7ab6-4f80-b022-eb53ec3f95c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "163f4dfe-4580-400b-95bd-9ab0133d057e",
            "cf844b86-129f-47c6-b861-80d9deee9b53",
            "b556e6f3-4e22-4bb3-8d05-a3730be8a0dc",
            "3a1b9a02-570d-4630-aac2-c0ff810808b7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2247,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fff74ae8-4a02-40e7-9e3a-1f259386f71c",
          "title": "Client Put/Pub/New Item Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should put a new document into the database",
              "fullTitle": "Client Put/Pub/New Item Tests should put a new document into the database",
              "timedOut": false,
              "duration": 1073,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(2000);\nconst options = {\n  port: 9098,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Put Test Node 1',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nconst { key } = profile;\nconst testDocument = generateRandomDocument();\nconst response = testApp.client.putItem(testDocument);\n// console.log(response);\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Success);\nexpect(response.responseData).to.be.a('string');\nexpect(response.responseData).to.equal(`Item ${testDocument.key} inserted into database.`);\ntestApp.shutdown();\nsetTimeout(() => {\n  testApp.shutdown();\n  done();\n}, 1000);",
              "err": {},
              "uuid": "d9f3f6eb-7f9d-43e1-a210-5a1d9305685e",
              "parentUUID": "fff74ae8-4a02-40e7-9e3a-1f259386f71c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should publish a document to the network",
              "fullTitle": "Client Put/Pub/New Item Tests should publish a document to the network",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\nconst options = {\n  port: 9099,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Put Test Node 2',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nconst { key } = profile;\nconst testDocument = generateRandomDocument();\nconst response = await testApp.client.pubItem(testDocument);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(3);\nresponse.forEach((item) => {\n  expect(item).to.be.an('object');\n  expect(item.responseType).to.equal(ResponseTypes.Success);\n  expect(item.responseData).to.be.a('string');\n});\ntestApp.shutdown();\n// setTimeout(() => {\n//   testApp.shutdown();\n// }, 1000);",
              "err": {},
              "uuid": "cb7a01b0-0f2a-42c8-badf-87932b01dd5d",
              "parentUUID": "fff74ae8-4a02-40e7-9e3a-1f259386f71c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new document using newPost",
              "fullTitle": "Client Put/Pub/New Item Tests should create a new document using newPost",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\nconst options = {\n  port: 9100,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Put Test Node 3',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nexpect(testApp.client.getProfile()).to.be.an('object');\nconst response = await testApp.client.createNewPost('Test Title', 'Test Content', ['test', 'content']);\nsetTimeout(() => {\n  // expect(response).to.not.be.undefined;\n  expect(response).to.be.an('array');\n  expect(response.length).to.equal(3);\n  response.forEach((item) => {\n    expect(item).to.be.an('object');\n    expect(item.responseType).to.equal(ResponseTypes.Success);\n    expect(item.responseData).to.be.a('string');\n  });\n  testApp.shutdown();\n  testApp.shutdown();\n  // done();\n}, 1000);",
              "err": {},
              "uuid": "2831f3cf-f972-4ae5-9b48-8a0c4ef98134",
              "parentUUID": "fff74ae8-4a02-40e7-9e3a-1f259386f71c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9f3f6eb-7f9d-43e1-a210-5a1d9305685e",
            "cb7a01b0-0f2a-42c8-badf-87932b01dd5d",
            "2831f3cf-f972-4ae5-9b48-8a0c4ef98134"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1255,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "639b34e5-4e1b-436a-87dd-50bac8d6deb8",
          "title": "Client Get Item Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a document from the database",
              "fullTitle": "Client Get Item Tests should get a document from the database",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\nconst options = {\n  port: 9101,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Test Node 1',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\n// const { key } = profile;\nconst testDocument = generateRandomDocument();\nconst response = await testApp.client.pubItem(testDocument);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(3);\nresponse.forEach((item) => {\n  expect(item).to.be.an('object');\n  expect(item.responseType).to.equal(ResponseTypes.Success);\n  expect(item.responseData).to.be.a('string');\n});\n// get the document from the database\nconst getItemResponse = await testApp.client.getItem(testDocument.key, Types.Document);\nexpect(getItemResponse).to.be.an('object');\nexpect(getItemResponse.responseType).to.equal(ResponseTypes.Success);\nexpect(getItemResponse.responseData).to.be.an('object');\nexpect(getItemResponse.responseData).to.deep.equal(testDocument);\ntestApp.shutdown();",
              "err": {},
              "uuid": "8e8a38c4-d977-412a-92b7-3cf9058c7c70",
              "parentUUID": "639b34e5-4e1b-436a-87dd-50bac8d6deb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a document from the network",
              "fullTitle": "Client Get Item Tests should get a document from the network",
              "timedOut": false,
              "duration": 198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst keys = await publishTestItems();\nexpect(keys).to.be.an('array');\nexpect(keys.length).to.equal(3);\n// console.log('keys:', keys);\nconst options = {\n  port: 9102,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Test Node 2',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\n// const response = await testApp.client.getItem(keys[0], Types.Document);\n// console.log('response1 :', response);\nconst promises = keys.map((key) => testApp.client.getItem(key, Types.Document));\nconst responses = await Promise.all(promises);\nresponses.forEach((response) => {\n  expect(response).to.be.an('object');\n  expect(response.responseType).to.equal(ResponseTypes.Success);\n  expect(response.responseData).to.be.an('object');\n  expect(keys).to.contain(response.responseData.key);\n  keys.splice(keys.indexOf(response.responseData.key), 1);\n});\nexpect(keys.length).to.equal(0);\ntestApp.shutdown();",
              "err": {},
              "uuid": "c90f3f35-74d7-4cb2-83e5-9c220bdcdda3",
              "parentUUID": "639b34e5-4e1b-436a-87dd-50bac8d6deb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get an invalid request",
              "fullTitle": "Client Get Item Tests should fail to get an invalid request",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// this.timeout(5000);\nconst keys = await publishTestItems();\nexpect(keys).to.be.an('array');\nexpect(keys.length).to.equal(3);\n// console.log('keys:', keys);\nconst options = {\n  port: 9103,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Test Node 3',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\n// Invalid Key\nlet response = await testApp.client.getItem('Invalid Key', Types.Document);\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid key format.');\n// Invalid Type\nresponse = await testApp.client.getItem('WY5WipcOJZAc8GBNnSgg4sf9Ps4rHkaGZ2IT/gV9V/4=', 'Invalid Type');\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid item type.');\n// Missing Key\nresponse = await testApp.client.getItem(null, Types.Document);\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid request, missing parameters.');\n// Missing Type\nresponse = await testApp.client.getItem('WY5WipcOJZAc8GBNnSgg4sf9Ps4rHkaGZ2IT/gV9V/4=');\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid request, missing parameters.');\ntestApp.shutdown();",
              "err": {},
              "uuid": "e443a3d7-f89c-4bc0-98fa-71179e22a671",
              "parentUUID": "639b34e5-4e1b-436a-87dd-50bac8d6deb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get a document not on the network",
              "fullTitle": "Client Get Item Tests should fail to get a document not on the network",
              "timedOut": false,
              "duration": 529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst options = {\n  port: 9104,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Test Node 4',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nconst document = generateRandomDocument();\nconst response = await testApp.client.getItem(document.key, Types.Document);\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Item not found in database, cache or DHT.');\ntestApp.shutdown();",
              "err": {},
              "uuid": "ff0ded83-075a-432a-afe0-248c535156a6",
              "parentUUID": "639b34e5-4e1b-436a-87dd-50bac8d6deb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8e8a38c4-d977-412a-92b7-3cf9058c7c70",
            "c90f3f35-74d7-4cb2-83e5-9c220bdcdda3",
            "e443a3d7-f89c-4bc0-98fa-71179e22a671",
            "ff0ded83-075a-432a-afe0-248c535156a6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
          "title": "Client Follow/Unfollow Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Client Follow/Unfollow Tests\"",
              "fullTitle": "Client Follow/Unfollow Tests \"before all\" hook in \"Client Follow/Unfollow Tests\"",
              "timedOut": false,
              "duration": 50,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const options = {\n  port: 9105,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Follow Test Node 1',\n};\ntestApp = new TestApp();\ntestApp.init(options);",
              "err": {},
              "uuid": "835ab6bb-4cfb-4347-b179-53a442549a51",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Client Follow/Unfollow Tests\"",
              "fullTitle": "Client Follow/Unfollow Tests \"after all\" hook in \"Client Follow/Unfollow Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testApp.shutdown();",
              "err": {},
              "uuid": "f567d15f-5b0d-45ff-a8c2-ecea6ed64ff0",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should allow following a user",
              "fullTitle": "Client Follow/Unfollow Tests should allow following a user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(0);\nconst newUser = generateRandomUser();\nconst { key } = newUser;\nconst response = testApp.client.followUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "30715b7f-7961-4f37-af56-4bc5d66d7247",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow unfollowing a user",
              "fullTitle": "Client Follow/Unfollow Tests should allow unfollowing a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst key = profile.following[0];\nconst response = testApp.client.unfollowUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(0);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(0);",
              "err": {},
              "uuid": "a0759484-a7d7-4f28-8a38-d05c3d47ffd6",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow following a user twice",
              "fullTitle": "Client Follow/Unfollow Tests should not allow following a user twice",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(0);\nconst newUser = generateRandomUser();\nconst { key } = newUser;\nlet response = testApp.client.followUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nresponse = testApp.client.followUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "9477293c-8f60-4b1d-9c79-02354de205cb",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow following an invalid user key",
              "fullTitle": "Client Follow/Unfollow Tests should not allow following an invalid user key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst key = 'Invalid Key';\nconst response = testApp.client.followUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "4d9bdcbc-58ac-4e06-b703-f4a02a5a7891",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow unfollowing an invalid user key",
              "fullTitle": "Client Follow/Unfollow Tests should not allow unfollowing an invalid user key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst key = 'Invalid Key';\nconst response = testApp.client.unfollowUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "8555a360-6fb3-4dd5-828b-6d67b40cb1ed",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not error unfollowing a valid but non-followed user",
              "fullTitle": "Client Follow/Unfollow Tests should not error unfollowing a valid but non-followed user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst newUser = generateRandomUser();\nconst { key } = newUser;\nconst response = testApp.client.unfollowUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "f66a2371-dbe3-4041-8038-e81bd312541d",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow following a null user key",
              "fullTitle": "Client Follow/Unfollow Tests should not allow following a null user key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst response = testApp.client.followUser(null);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "df703d22-d2b3-4fbd-84ad-33372047a8de",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow unfollowing a null user key",
              "fullTitle": "Client Follow/Unfollow Tests should not allow unfollowing a null user key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst response = testApp.client.unfollowUser(null);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "c2d78eaf-b30d-4c6d-9752-4f927cd5c9ad",
              "parentUUID": "7b8db2ec-1a47-4f83-9a9a-0cf24e985b37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "30715b7f-7961-4f37-af56-4bc5d66d7247",
            "a0759484-a7d7-4f28-8a38-d05c3d47ffd6",
            "9477293c-8f60-4b1d-9c79-02354de205cb",
            "4d9bdcbc-58ac-4e06-b703-f4a02a5a7891",
            "8555a360-6fb3-4dd5-828b-6d67b40cb1ed",
            "f66a2371-dbe3-4041-8038-e81bd312541d",
            "df703d22-d2b3-4fbd-84ad-33372047a8de",
            "c2d78eaf-b30d-4c6d-9752-4f927cd5c9ad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e6f1e804-c4d2-40c6-aa25-723a00492314",
          "title": "Client Get Followed Items Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Client Get Followed Items Tests\"",
              "fullTitle": "Client Get Followed Items Tests \"before all\" hook in \"Client Get Followed Items Tests\"",
              "timedOut": false,
              "duration": 353,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\n// create a new user profile\nconst options = [];\n// A user which saves documents to the database only\noptions.push({\n  port: 9101,\n  interface: 'none',\n  dbname: 'tests/data/app_test_database.db',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Followed Items Test Node 1',\n  noDHT: true, // not yet implemented\n});\n// A user which sends to cache only\noptions.push({\n  port: 9102,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Followed Items Test Node 2',\n  noDHT: true, // not yet implemented\n});\n// A user which only sends to dht\noptions.push({\n  port: 9103,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'Get Followed Items Test Node 3',\n});\nlet app = new TestApp();\napp.init(options[0]);\napp.client.createNewPost('Post One', 'Content One', ['test', 'content']);\nawait app.client.createNewPost('Post Two', 'Content Two', ['test', 'content']);\nkeys.push(app.client.getProfile().userObject.key);\napp.shutdown();\napp = new TestApp();\napp.init(options[1]);\nawait app.client.createNewPost('Post Three', 'Content Three', ['test', 'content']);\nawait app.client.createNewPost('Post Four', 'Content Four', ['test', 'content']);\nkeys.push(app.client.getProfile().userObject.key);\napp.shutdown();\napp = new TestApp();\napp.init(options[2]);\nawait app.client.createNewPost('Post Five', 'Content Five', ['test', 'content']);\nawait app.client.createNewPost('Post Six', 'Content Six', ['test', 'content']);\nkeys.push(app.client.getProfile().userObject.key);\napp.shutdown();",
              "err": {},
              "uuid": "51db2b21-fa73-48fc-9d16-240cbfe10668",
              "parentUUID": "e6f1e804-c4d2-40c6-aa25-723a00492314",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Client Get Followed Items Tests\"",
              "fullTitle": "Client Get Followed Items Tests \"after all\" hook in \"Client Get Followed Items Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "28e13949-2ae4-4c38-b0ce-c6a27e24d16a",
              "parentUUID": "e6f1e804-c4d2-40c6-aa25-723a00492314",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get followed items from the database",
              "fullTitle": "Client Get Followed Items Tests should get followed items from the database",
              "timedOut": false,
              "duration": 1076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst followOptions = {\n  port: 9104,\n  interface: 'none',\n  dbname: './tests/data/app_test_database.db',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Followed Items Test Node 4',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\n// console.log('testApp:', testApp);\nconst profile = await testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(3);\nconst response = await testApp.client.getFollowedDocuments();\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(6);\nresponse.forEach((item) => {\n  expect(item).to.be.an('object');\n  expect(item.type).to.equal(Types.Document);\n});\ntestApp.shutdown();",
              "err": {},
              "uuid": "39bff254-e7bd-43fc-84a5-767c86587ab2",
              "parentUUID": "e6f1e804-c4d2-40c6-aa25-723a00492314",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followed items from the cache",
              "fullTitle": "Client Get Followed Items Tests should get followed items from the cache",
              "timedOut": false,
              "duration": 1071,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000);\nconst followOptions = {\n  port: 9105,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Followed Items Test Node 5',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\nconst response = await testApp.client.getFollowedDocuments();\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(6);\nsetTimeout(() => {\n  testApp.shutdown();\n}, 1000);",
              "err": {},
              "uuid": "09b3ca8c-fc9b-4289-9dea-e009ff69ed32",
              "parentUUID": "e6f1e804-c4d2-40c6-aa25-723a00492314",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followed items from the dht",
              "fullTitle": "Client Get Followed Items Tests should get followed items from the dht",
              "timedOut": false,
              "duration": 1027,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst followOptions = {\n  port: 9106,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'Get Followed Items Test Node 6',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\nconst response = await testApp.client.getFollowedDocuments();\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(6);\ntestApp.shutdown();\nsetTimeout(() => {\n  testApp.shutdown();\n}, 2000);",
              "err": {},
              "uuid": "17cdaf2b-b065-45fb-85e7-fe689cbb9cc9",
              "parentUUID": "e6f1e804-c4d2-40c6-aa25-723a00492314",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a slice of followed items",
              "fullTitle": "Client Get Followed Items Tests should get a slice of followed items",
              "timedOut": false,
              "duration": 1074,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(7000);\nconst followOptions = {\n  port: 9107,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'Get Followed Items Test Node 7',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\nconst response = await testApp.client.getSomeFollowedDocuments(5, 2);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nsetTimeout(() => {\n  testApp.shutdown();\n}, 2000);",
              "err": {},
              "uuid": "3904360d-45b5-43fe-b1da-2f50bac00a54",
              "parentUUID": "e6f1e804-c4d2-40c6-aa25-723a00492314",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a slice of followed items without errors",
              "fullTitle": "Client Get Followed Items Tests should get a slice of followed items without errors",
              "timedOut": false,
              "duration": 932,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(7000);\nconst followOptions = {\n  port: 9108,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'Get Followed Items Test Node 8',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\nconst response = await testApp.client.getSomeFollowedDocuments(6, 2);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(0);\ntestApp.shutdown();",
              "err": {},
              "uuid": "a3c85dd0-9b70-4337-b693-cc807b567d50",
              "parentUUID": "e6f1e804-c4d2-40c6-aa25-723a00492314",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39bff254-e7bd-43fc-84a5-767c86587ab2",
            "09b3ca8c-fc9b-4289-9dea-e009ff69ed32",
            "17cdaf2b-b065-45fb-85e7-fe689cbb9cc9",
            "3904360d-45b5-43fe-b1da-2f50bac00a54",
            "a3c85dd0-9b70-4337-b693-cc807b567d50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5180,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7ad83e05-b6f9-4fc9-849e-0a9b59497c8b",
          "title": "Login Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login and create a new user",
              "fullTitle": "Login Tests should login and create a new user",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\n// console.log('userProfile: ', userProfile);\n// console.log('secretKey: ', secretKey);\nexpect(userProfile).to.be.an('object');\nconst { errorProf } = userProfileSchema.validate(userProfile);\nexpect(errorProf).to.be.undefined;\nconst user = userProfile.userObject;\n// console.log('user: ', user);\nconst { errorUser } = userSchema.validate(user);\nexpect(errorUser).to.be.undefined;\nexpect(userProfile.key.length).to.equal(44);\nexpect(userProfile.secretKey.length).to.not.be.undefined;\nexpect(secretKey).to.be.a('string');\nexpect(secretKey).to.match(longKeyRegex);",
              "err": {},
              "uuid": "3b259e2a-7bd7-4ee8-98e1-b26e689b07b7",
              "parentUUID": "7ad83e05-b6f9-4fc9-849e-0a9b59497c8b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login an existing user",
              "fullTitle": "Login Tests should login an existing user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// todo",
              "err": {},
              "uuid": "48b40d27-6b8c-4bcf-92a3-404e11cd4f29",
              "parentUUID": "7ad83e05-b6f9-4fc9-849e-0a9b59497c8b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b259e2a-7bd7-4ee8-98e1-b26e689b07b7",
            "48b40d27-6b8c-4bcf-92a3-404e11cd4f29"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9939e9a0-80d9-4a8a-9eb3-5d2602586388",
          "title": "User Session Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set the userSession key and profile on new user login",
              "fullTitle": "User Session Tests should set the userSession key and profile on new user login",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst sessionUserKey = auth.getUserSessionKey();\nexpect(sessionUserKey).to.not.be.undefined;\nexpect(sessionUserKey).to.be.a('string');\nexpect(sessionUserKey).to.match(keyRegex);\nexpect(sessionUserKey).to.equal(userProfile.key);\nconst sessionUserProfile = auth.getUserSessionProfile();\nexpect(sessionUserProfile).to.not.be.undefined;\nexpect(sessionUserProfile).to.be.an('object');\nexpect(sessionUserProfile).to.deep.equal(userProfile);",
              "err": {},
              "uuid": "9109c651-d58d-4bf6-bad9-ab33c997a555",
              "parentUUID": "9939e9a0-80d9-4a8a-9eb3-5d2602586388",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9109c651-d58d-4bf6-bad9-ab33c997a555"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 50,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bf7dfa52-401f-44ad-9df4-238fb23b5478",
          "title": "Sign/Verify Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sign a string message",
              "fullTitle": "Sign/Verify Tests should sign a string message",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst message = 'test message';\nconst signature = auth.signStringWithKey(message, secretKey);\nexpect(signature).to.not.be.undefined;\nexpect(signature).to.be.a('string');\nexpect(signature.length).to.equal(88);\nexpect(signature).to.match(longKeyRegex);",
              "err": {},
              "uuid": "8e322d1f-a2d8-4f18-8e63-6b0e5d6b8bde",
              "parentUUID": "bf7dfa52-401f-44ad-9df4-238fb23b5478",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify a signed message",
              "fullTitle": "Sign/Verify Tests should verify a signed message",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst message = 'test message';\nconst signature = auth.signStringWithKey(message, secretKey);\nconst verified = auth.verifyStringSignature(message, signature, userProfile.key);\nexpect(verified).to.be.true;",
              "err": {},
              "uuid": "4b997ff5-c4a7-45ee-9be4-1c838a42ee6a",
              "parentUUID": "bf7dfa52-401f-44ad-9df4-238fb23b5478",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not verify a signed message with the wrong key",
              "fullTitle": "Sign/Verify Tests should not verify a signed message with the wrong key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// todo",
              "err": {},
              "uuid": "eafceba8-9f70-4711-97a7-03be76647215",
              "parentUUID": "bf7dfa52-401f-44ad-9df4-238fb23b5478",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not verify a signed message with the wrong message",
              "fullTitle": "Sign/Verify Tests should not verify a signed message with the wrong message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// todo",
              "err": {},
              "uuid": "9feac561-4039-4b76-adea-729af4f14894",
              "parentUUID": "bf7dfa52-401f-44ad-9df4-238fb23b5478",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sign a document string",
              "fullTitle": "Sign/Verify Tests should sign a document string",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst testDocument = generateRandomDocument();\n// console.log(testDocument);\n// unpack the item and stringify\nconst { signature: sig, ...itemContent } = testDocument;\nconst itemString = JSON.stringify(itemContent);\n// console.log('itemString', itemString, 'sig', sig);\nconst signature = auth.signStringWithKey(itemString, secretKey);\n// console.log('Document sig:', signature);\nexpect(signature).to.not.be.undefined;\nexpect(signature).to.be.a('string');\nexpect(signature.length).to.equal(88);\nexpect(signature).to.match(longKeyRegex);",
              "err": {},
              "uuid": "e4ed9d6b-d2de-4579-af4a-90cf8915183b",
              "parentUUID": "bf7dfa52-401f-44ad-9df4-238fb23b5478",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should stringify and sign a document object",
              "fullTitle": "Sign/Verify Tests should stringify and sign a document object",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst testDocument = generateRandomDocument();\n// console.log(testDocument);\n// unpack the item and stringify\nconst signature = auth.signItem(testDocument, secretKey);\n// console.log('Document Sig:', signature);\nexpect(signature).to.not.be.undefined;\nexpect(signature).to.be.a('string');\nexpect(signature.length).to.equal(88);\nexpect(signature).to.match(longKeyRegex);",
              "err": {},
              "uuid": "5067fc69-3cf6-457c-9f4a-d0734b6292a7",
              "parentUUID": "bf7dfa52-401f-44ad-9df4-238fb23b5478",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8e322d1f-a2d8-4f18-8e63-6b0e5d6b8bde",
            "4b997ff5-c4a7-45ee-9be4-1c838a42ee6a",
            "eafceba8-9f70-4711-97a7-03be76647215",
            "9feac561-4039-4b76-adea-729af4f14894",
            "e4ed9d6b-d2de-4579-af4a-90cf8915183b",
            "5067fc69-3cf6-457c-9f4a-d0734b6292a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 220,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0f3d53c8-af19-4bc2-b200-f0ec6840f821",
          "title": "Client Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/client.test.js",
          "file": "/tests/client.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new client instance",
              "fullTitle": "Client Tests should create a new client instance",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "8d6d3514-60c9-42da-8ee0-140ea5832641",
              "parentUUID": "0f3d53c8-af19-4bc2-b200-f0ec6840f821",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d6d3514-60c9-42da-8ee0-140ea5832641"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
          "title": "Database Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/database.test.js",
          "file": "/tests/database.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Database Tests\"",
              "fullTitle": "Database Tests \"before all\" hook in \"Database Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Code to run before all tests in this test suite",
              "err": {},
              "uuid": "7e04ac42-9176-4f32-b91f-1baea13d4ce2",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Database Tests\"",
              "fullTitle": "Database Tests \"before each\" hook in \"Database Tests\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create an empty test database in memory before each test\ntestDB = new Database('./tests/data/test_database.db');",
              "err": {},
              "uuid": "21bb2161-7bc8-4a88-9e17-60b8ee9972e6",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Database Tests\"",
              "fullTitle": "Database Tests \"after all\" hook in \"Database Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Code to run after all tests in this test suite",
              "err": {},
              "uuid": "84a93b20-fdad-43dd-8cee-f53500b6de4e",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Database Tests\"",
              "fullTitle": "Database Tests \"after each\" hook in \"Database Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Close the database connection after each test\nif (testDB) {\n  testDB.closeDatabaseConnection();\n}\n// Delete the test database file, if it exists\nif (fs.existsSync('./tests/data/test_database.db')) {\n  fs.unlinkSync('./tests/data/test_database.db');\n}",
              "err": {},
              "uuid": "481b19b0-19df-4909-afc6-b13bc8a8299e",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new database",
              "fullTitle": "Database Tests should create a new database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// testDB = new Database();\nexpect(testDB).to.be.an.instanceof(Database);",
              "err": {},
              "uuid": "b34031e5-1a65-406d-adaf-4d463567d693",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should open database if path given and exists",
              "fullTitle": "Database Tests should open database if path given and exists",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// testDB = new Database('./tests/data/test_database.db');\nexpect(testDB).to.be.an.instanceof(Database);\nexpect(testDB.databaseHasTables()).to.be.equal(true);\nconst testDocument = generateRandomDocument();\ntestDB.put(testDocument);\ntestDB.closeDatabaseConnection();\ntestDB = new Database('./tests/data/test_database.db');\nconst retrievedDocument = testDB.get(testDocument.key, Types.Document);\nexpect(retrievedDocument).to.exist;\nexpect(retrievedDocument).to.deep.equal(testDocument);",
              "err": {},
              "uuid": "87d69469-5d88-4203-a692-7d240f09140b",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create tables if none exist",
              "fullTitle": "Database Tests should create tables if none exist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(testDB).to.be.an.instanceof(Database);\nexpect(testDB.databaseHasTables()).to.be.equal(true);",
              "err": {},
              "uuid": "0da74d71-cdd4-4bf3-b5cd-fe0442045f22",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create database in memory if requested",
              "fullTitle": "Database Tests should create database in memory if requested",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoryDB = new Database(':memory:');\nexpect(testDB).to.be.an.instanceof(Database);\nexpect(testDB.databaseHasTables()).to.be.equal(true);\nmemoryDB.closeDatabaseConnection();",
              "err": {},
              "uuid": "08c4a676-d3bd-4591-9a41-ca63d116e203",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert a document into the database without errors",
              "fullTitle": "Database Tests should insert a document into the database without errors",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\nconst result = testDB.put(testDocument);\n// If the result is null, then the insert failed\nexpect(result).to.exist; // Ensure that result is not null\n// If the result is not an error, then the insert succeeded\nexpect(result).to.not.be.an('error'); // Ensure that result is not an error\nexpect(result.key).to.equal(testDocument.key); // Ensure that our document was inserted",
              "err": {},
              "uuid": "f4005e6d-12c1-4ef9-aa77-6062eb2ddb55",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert multiple documents into the database without errors",
              "fullTitle": "Database Tests should insert multiple documents into the database without errors",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocuments = [];\nfor (let i = 0; i < 30; i += 1) {\n  testDocuments.push(generateRandomDocument());\n}\ntestDocuments.forEach((document) => {\n  const result = testDB.put(document);\n  expect(result).to.exist;\n  expect(result.key).to.equal(document.key);\n});",
              "err": {},
              "uuid": "55e4acc5-51b1-4b2b-a820-243b3004424e",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to insert a document into the database if invalid type given",
              "fullTitle": "Database Tests should fail to insert a document into the database if invalid type given",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\ntestDocument.type = 'invalid_type';\nexpect(() => testDB.put(testDocument)).to.throw('Invalid item type.');",
              "err": {},
              "uuid": "b8e36466-3722-4552-b9a3-1e34b426c14f",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to insert a document into the database if invalid key given",
              "fullTitle": "Database Tests should fail to insert a document into the database if invalid key given",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\ntestDocument.key = '1234';\nexpect(() => testDB.put(testDocument)).to.throw('Key is not a valid hash for the item.');",
              "err": {},
              "uuid": "bcd95aed-6a56-4cdd-86b2-3c17653bff37",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to insert a document into the database if duplicate key given (item already exists)",
              "fullTitle": "Database Tests should fail to insert a document into the database if duplicate key given (item already exists)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\nconst result = testDB.put(testDocument);\nexpect(result).to.exist;\nexpect(result.key).to.equal(testDocument.key);\nexpect(() => testDB.put(testDocument)).to.throw('Key already exists in database.');",
              "err": {},
              "uuid": "7e5162d0-cf48-4d0c-a061-23cc974f44c2",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a document from the database",
              "fullTitle": "Database Tests should retrieve a document from the database",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\ntestDB.put(testDocument);\nconst retrievedDocument = testDB.get(testDocument.key, Types.Document);\nexpect(retrievedDocument).to.deep.equal(testDocument);",
              "err": {},
              "uuid": "b6d1eafd-8137-4441-82d2-3a94c43e7782",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw exception if bad key is given",
              "fullTitle": "Database Tests should throw exception if bad key is given",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentKey = 'non_existent_key';\nexpect(() => testDB.get(nonExistentKey, Types.Document)).to.throw('Invalid key format.');",
              "err": {},
              "uuid": "db9c7e78-0a69-47af-a04d-fb3200bd37bb",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert a valid user into the database",
              "fullTitle": "Database Tests should insert a valid user into the database",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\n// const key = testUser.key;\nconst result = testDB.put(testUser);\n// If the result is null, then the insert failed\nexpect(result).to.exist; // Ensure that result is not null\n// If the result matches the item given then success\nexpect(result.key).to.equal(testUser.key); // Ensure that our document was inserted\nexpect(result).to.deep.equal(testUser);",
              "err": {},
              "uuid": "b54b0127-f691-45d7-89b7-0d10e2ea60a1",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a valid user from the database",
              "fullTitle": "Database Tests should get a valid user from the database",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\n// const key = testUser.publicKey;\ntestDB.put(testUser);\n// Test get function with user type\nconst retrievedUser = testDB.get(testUser.key, Types.User);\nexpect(retrievedUser).to.exist;\nexpect(retrievedUser).to.deep.equal(testUser);\n// Test the getUser helper wrapper\nconst retrievedUser2 = testDB.getUser(testUser.key);\nexpect(retrievedUser2).to.exist;\nexpect(retrievedUser2).to.deep.equal(testUser);",
              "err": {},
              "uuid": "fd4d42a1-af5d-430a-b6fa-cff6f9d1ad50",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not insert a user into the database with wrong type",
              "fullTitle": "Database Tests should not insert a user into the database with wrong type",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestUser.type = 'invalid';\n// Should throw an Invalid item type error\nexpect(() => testDB.put(testUser)).to.throw('Invalid item type.');",
              "err": {},
              "uuid": "c2867269-9b56-4454-a5e7-3cbbe95dbe68",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not insert a user into the database with invalid key",
              "fullTitle": "Database Tests should not insert a user into the database with invalid key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestUser.key = '1234';\n// Should throw an Invalid key format error\nexpect(() => testDB.put(testUser)).to.throw('Key is not a valid hash for the item.');",
              "err": {},
              "uuid": "7617b147-cb6c-474d-a4ca-8778b53f7dd7",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert multiple users into the database without errors",
              "fullTitle": "Database Tests should insert multiple users into the database without errors",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keys = insertTestUsers(testDB);\nkeys.forEach((key) => {\n  const retrievedUser = testDB.getUser(key);\n  expect(retrievedUser).to.exist;\n  expect(retrievedUser.key).to.equal(key);\n});",
              "err": {},
              "uuid": "1899ff59-49ec-4844-8039-213f13cc1f3c",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all users from the database",
              "fullTitle": "Database Tests should get all users from the database",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keys = insertTestUsers(testDB);\nconst users = testDB.getAllUsers();\nexpect(users).to.exist;\nexpect(users).to.be.an('array');\nexpect(users.length).to.equal(30);\nusers.forEach((user) => {\n  expect(keys.includes(user.key)).to.equal(true);\n});",
              "err": {},
              "uuid": "144e35b6-486c-4024-bd96-8b48312cd06c",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user in the database",
              "fullTitle": "Database Tests should update a user in the database",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestDB.put(testUser);\nconst updatedUser = { ...testUser }; // generateRandomUser();\n// updatedUser.key = testUser.key;\nupdatedUser.lastSeen = new Date().toISOString();\nconst result = testDB.updateUser(updatedUser);\nexpect(result).to.exist;\nexpect(result).to.deep.equal(updatedUser);\nconst retrievedUser = testDB.getUser(testUser.key);\nexpect(retrievedUser).to.exist;\nexpect(retrievedUser).to.deep.equal(updatedUser);",
              "err": {},
              "uuid": "001c1cf8-7676-4bfd-a819-b1405c69d34d",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user in the database",
              "fullTitle": "Database Tests should update a user in the database",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestUser.lastSeen = '2023-08-25T19:04:18.259Z';\ntestDB.put(testUser);\nconst updatedUser = { ...testUser };\nupdatedUser.lastSeen = '2022-08-25T10:04:18.259Z';\nconst result = testDB.updateUser(updatedUser);\nexpect(result).to.exist;\nexpect(result).to.deep.equal(testUser); // Why?\nconst retrievedUser = testDB.getUser(testUser.key);\nexpect(retrievedUser).to.exist;\nexpect(retrievedUser).to.deep.equal(testUser);",
              "err": {},
              "uuid": "7ca813e5-a52a-41b6-9323-635ac03a121c",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user from the database",
              "fullTitle": "Database Tests should delete a user from the database",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestDB.put(testUser);\nconst result = testDB.deleteUser(testUser.key);\nexpect(result).to.exist;\nexpect(result).to.deep.equal(testUser);\nconst retrievedUser = testDB.getUser(testUser.key);\nexpect(retrievedUser).to.not.exist;",
              "err": {},
              "uuid": "8844aed5-9ae1-4db8-82aa-97bb27003a5c",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when trying to delete non-existent user",
              "fullTitle": "Database Tests should throw an error when trying to delete non-existent user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\nexpect(() => testDB.deleteUser(testUser.key)).to.throw('Item not found in database.');",
              "err": {},
              "uuid": "87fe98b5-d151-4d2e-9199-3cc8e4257477",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert a valid feed into the database",
              "fullTitle": "Database Tests should insert a valid feed into the database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "63b224fd-ff77-4934-9489-20362d3ee554",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a valid feed from the database",
              "fullTitle": "Database Tests should get a valid feed from the database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "e4d20656-796e-42c8-9355-39c79423987a",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert a valid user profile into the database",
              "fullTitle": "Database Tests should insert a valid user profile into the database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "1b32091a-5749-4560-8946-92e44f7cfa53",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a valid user profile from the database",
              "fullTitle": "Database Tests should get a valid user profile from the database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "54908508-9dc5-4465-88af-389ca7d5b173",
              "parentUUID": "ae18f0e5-95d1-4a88-98de-2e169b9b02b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b34031e5-1a65-406d-adaf-4d463567d693",
            "87d69469-5d88-4203-a692-7d240f09140b",
            "0da74d71-cdd4-4bf3-b5cd-fe0442045f22",
            "08c4a676-d3bd-4591-9a41-ca63d116e203",
            "f4005e6d-12c1-4ef9-aa77-6062eb2ddb55",
            "55e4acc5-51b1-4b2b-a820-243b3004424e",
            "b8e36466-3722-4552-b9a3-1e34b426c14f",
            "bcd95aed-6a56-4cdd-86b2-3c17653bff37",
            "7e5162d0-cf48-4d0c-a061-23cc974f44c2",
            "b6d1eafd-8137-4441-82d2-3a94c43e7782",
            "db9c7e78-0a69-47af-a04d-fb3200bd37bb",
            "b54b0127-f691-45d7-89b7-0d10e2ea60a1",
            "fd4d42a1-af5d-430a-b6fa-cff6f9d1ad50",
            "c2867269-9b56-4454-a5e7-3cbbe95dbe68",
            "7617b147-cb6c-474d-a4ca-8778b53f7dd7",
            "1899ff59-49ec-4844-8039-213f13cc1f3c",
            "144e35b6-486c-4024-bd96-8b48312cd06c",
            "001c1cf8-7676-4bfd-a819-b1405c69d34d",
            "7ca813e5-a52a-41b6-9323-635ac03a121c",
            "8844aed5-9ae1-4db8-82aa-97bb27003a5c",
            "87fe98b5-d151-4d2e-9199-3cc8e4257477",
            "63b224fd-ff77-4934-9489-20362d3ee554",
            "e4d20656-796e-42c8-9355-39c79423987a",
            "1b32091a-5749-4560-8946-92e44f7cfa53",
            "54908508-9dc5-4465-88af-389ca7d5b173"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 302,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "64224b76-e449-4b41-971e-e5c191bde49d",
          "title": "DHT Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/dht.test.js",
          "file": "/tests/dht.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DHT Tests\"",
              "fullTitle": "DHT Tests \"before all\" hook in \"DHT Tests\"",
              "timedOut": false,
              "duration": 1510,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\n// Code to run before all tests in this test suite\n// Check if dht is already running\n// Create a bootstrap node\ncreateDHTBootstrap();\n// Create an empty test database\n// testDB = new Database('./tests/data/test_database.db');\ntestDB = new Database(':memory:');\nDHT.setDb(testDB);\nexpect(testDB).to.be.an.instanceof(Database);\nsetTimeout(() => {\n  // Shut down the dht test node\n  done();\n}, 1500);",
              "err": {},
              "uuid": "95da2a05-5aea-4738-a3cc-cb99dfcf25e8",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"DHT Tests\"",
              "fullTitle": "DHT Tests \"before each\" hook in \"DHT Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ffbf3a53-fbf6-464f-845d-ef362c2885d9",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DHT Tests\"",
              "fullTitle": "DHT Tests \"after all\" hook in \"DHT Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Destroy the bootstrap node\ndestroyDHTBootstrap();\n// Shut down the dht test node\nDHT.shutdownDHT();\n// Close the database connection\nif (testDB) {\n  testDB.closeDatabaseConnection();\n}\n// Delete the test database file, if it exists\nif (fs.existsSync('./tests/data/test_database.db')) {\n  fs.unlinkSync('./tests/data/test_database.db');\n}",
              "err": {},
              "uuid": "f7bcf9d9-a4b2-4628-9f61-711e763c756d",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"DHT Tests\"",
              "fullTitle": "DHT Tests \"after each\" hook in \"DHT Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "65257887-e931-4b3d-9556-7ef31c2ba83a",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should set up a dht node",
              "fullTitle": "DHT Tests should set up a dht node",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "node = DHT.initDHTNode();\nexpect(node).to.exist;",
              "err": {},
              "uuid": "03ce403e-0982-439a-8b68-43e41d45fc7e",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail a query for non exising document",
              "fullTitle": "DHT Tests should fail a query for non exising document",
              "timedOut": false,
              "duration": 4008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst doc = generateRandomDocument();\nconst response = await DHT.queryDHT(doc.key, Types.Document);\nexpect(response).to.exist;\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Item not found in DHT.');",
              "err": {},
              "uuid": "2597b52d-de99-418a-9339-1a432cbbdbf4",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should put a document in the dht",
              "fullTitle": "DHT Tests should put a document in the dht",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst doc = generateRandomDocument();\nconst response = await DHT.storeDHT(doc.key, doc);\nexpect(response).to.exist;\nexpect(response.key).to.equal(doc.key);",
              "err": {},
              "uuid": "496621c1-1f3d-4037-8cc6-a69ba7316d7d",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to put a document in the dht",
              "fullTitle": "DHT Tests should fail to put a document in the dht",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst doc = generateRandomDocument();\ndoc.key = 'invalid key';\nconst response = await DHT.storeDHT(doc.key, doc);\nexpect(response).to.exist;\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid key.');",
              "err": {},
              "uuid": "8628d87b-50b3-43ff-96f5-b5bf44d51511",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query for an existing document",
              "fullTitle": "DHT Tests should query for an existing document",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst doc = generateRandomDocument();\nconst put = await DHT.storeDHT(doc.key, doc);\nexpect(put).to.exist;\nexpect(put.key).to.equal(doc.key);\nconst response = await DHT.queryDHT(put.key, put.type);\nexpect(response).to.exist;\nexpect(response.responseType).to.equal(ResponseTypes.Success);\nexpect(response.responseData).to.deep.equal(doc);",
              "err": {},
              "uuid": "fbaec46b-7238-4dea-909d-5e4c2607e735",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should put a lot of documents in the dht",
              "fullTitle": "DHT Tests should put a lot of documents in the dht",
              "timedOut": false,
              "duration": 1981,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst amount = 20;\n// generate documents\nconst docs = [];\nfor (let i = 0; i < amount; i += 1) {\n  docs.push(generateRandomDocument());\n}\n// create 100 promises\nconst promises = [];\ndocs.forEach((doc) => {\n  promises.push(DHT.storeDHT(doc.key, doc));\n});\n// wait for all promises to resolve\nconst responses = await Promise.all(promises);\n// check that all responses are valid\nresponses.forEach((response) => {\n  expect(response).to.exist;\n  expect(response.key).to.exist;\n});",
              "err": {},
              "uuid": "e0d162cc-3a6a-4c5b-9a7f-85a6e1375db7",
              "parentUUID": "64224b76-e449-4b41-971e-e5c191bde49d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "03ce403e-0982-439a-8b68-43e41d45fc7e",
            "2597b52d-de99-418a-9339-1a432cbbdbf4",
            "496621c1-1f3d-4037-8cc6-a69ba7316d7d",
            "8628d87b-50b3-43ff-96f5-b5bf44d51511",
            "fbaec46b-7238-4dea-909d-5e4c2607e735",
            "e0d162cc-3a6a-4c5b-9a7f-85a6e1375db7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6009,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "30195fed-fa47-44c8-aaea-f2537fd03e3b",
          "title": "UI Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/ui.term.test.js",
          "file": "/tests/ui.term.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new Terminal UI instance",
              "fullTitle": "UI Tests should create a new Terminal UI instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "a33712a7-b1a3-47b0-917c-5ae591015039",
              "parentUUID": "30195fed-fa47-44c8-aaea-f2537fd03e3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a33712a7-b1a3-47b0-917c-5ae591015039"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
          "title": "Document Generation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/utils.test.js",
          "file": "/tests/utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should generate a valid document",
              "fullTitle": "Document Generation Tests should generate a valid document",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\nexpect(doc).to.be.an('object');\nexpect(doc.type).to.equal('document');\nexpect(doc.key).to.be.a('string');\nexpect(doc.owner).to.be.a('string');\nexpect(doc.owner).to.match(keyRegex);\nexpect(doc.timestamp).to.be.a('string');\nexpect(doc.title).to.be.a('string');\nexpect(doc.title).to.have.lengthOf.at.least(5);\nexpect(doc.title).to.have.lengthOf.at.most(50);\nexpect(doc.content).to.be.a('string');\nexpect(doc.content).to.have.lengthOf.at.least(5);\nexpect(doc.content).to.have.lengthOf.at.most(2000);\nexpect(doc.tags).to.be.an('array');\nexpect(doc.tags).to.have.lengthOf.at.least(0);\nexpect(doc.tags).to.have.lengthOf.at.most(5);\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "47980db1-a9e4-4d4e-b741-d5c43cbcbd5a",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a unique document",
              "fullTitle": "Document Generation Tests should generate a unique document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = generateRandomDocument();\nconst doc2 = generateRandomDocument();\nexpect(doc1).to.not.deep.equal(doc2);\nexpect(doc1.key).to.not.equal(doc2.key);\nexpect(doc1.owner).to.not.equal(doc2.owner);\nexpect(doc1.timestamp).to.not.equal(doc2.timestamp);\nexpect(doc1.title).to.not.equal(doc2.title);\n/* etc */",
              "err": {},
              "uuid": "738f096c-6658-4229-941c-8e61b02746f2",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid hash from document",
              "fullTitle": "Document Generation Tests should generate a valid hash from document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\n// const key = doc.key;\nexpect(isValidKeyFormat(doc.key)).to.be.true;\nexpect(isValidKeyForItem(doc.key, doc)).to.be.true;",
              "err": {},
              "uuid": "b932f718-9cc4-49c4-bffe-18c79e1a22c0",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate an invalid document hash",
              "fullTitle": "Document Generation Tests should not validate an invalid document hash",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = generateRandomDocument();\nconst doc2 = generateRandomDocument();\n// const key = doc1.id;\nexpect(isValidKeyForItem(doc1.key, doc1)).to.be.true;\nexpect(isValidKeyForItem(doc1.key, doc2)).to.be.false;",
              "err": {},
              "uuid": "36cf10ff-51ff-427f-ad94-d278c7dc7900",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not accept the wrong key for document",
              "fullTitle": "Document Generation Tests should not accept the wrong key for document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\nconst key = '123456789ABCDEF';\nexpect(isValidKeyForItem(key, doc)).to.be.false;\nexpect(isValidKeyFormat(key)).to.be.false;",
              "err": {},
              "uuid": "015a03c4-1fa7-4e04-915b-467564598077",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a consistent hash for same document",
              "fullTitle": "Document Generation Tests should generate a consistent hash for same document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\n// We are hashing a generated doc so the key will not match the id\n// But key1 and key2 should be the same\nconst key1 = generateKey(doc);\nconst key2 = generateKey(doc);\nexpect(key1).to.equal(key2);\nexpect(key1).to.not.equal(key1.id);",
              "err": {},
              "uuid": "a260eb21-52df-4a76-a37d-a7fbce1b80b6",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a different hash for different document",
              "fullTitle": "Document Generation Tests should generate a different hash for different document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = generateRandomDocument();\nconst doc2 = generateRandomDocument();\nconst key1 = generateKey(doc1);\nconst key2 = generateKey(doc2);\nexpect(key1).to.not.equal(key2);",
              "err": {},
              "uuid": "ef701c5a-2962-4c70-959d-0a4494364c99",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the same hash for different document with same data",
              "fullTitle": "Document Generation Tests should generate the same hash for different document with same data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = generateRandomDocument();\nconst doc2 = { ...doc1 };\nconst key1 = generateKey(doc1);\nconst key2 = generateKey(doc2);\nexpect(key1).to.equal(key2);",
              "err": {},
              "uuid": "08925435-e176-4cfb-b8c7-b87c8caacde4",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the same hash for same object with different parameter order",
              "fullTitle": "Document Generation Tests should generate the same hash for same object with different parameter order",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = {\n  type: 'document',\n  id: '1234567890123456',\n  owner: '1234567890123456',\n  timestamp: '2021-03-01T00:00:00.000Z',\n  title: 'Lorem ipsum dolor sit amet',\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.',\n  tags: ['lorem', 'ipsum', 'dolor', 'sit', 'amet'],\n  signature: null,\n};\nconst doc2 = {\n  id: '1234567890123456',\n  type: 'document',\n  owner: '1234567890123456',\n  timestamp: '2021-03-01T00:00:00.000Z',\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.',\n  tags: ['lorem', 'ipsum', 'dolor', 'sit', 'amet'],\n  title: 'Lorem ipsum dolor sit amet',\n  signature: null,\n};\nexpect(doc1).to.deep.equal(doc2);\n// Need to test that the order of keys doesn't effect the hash function\n// Otherwise it will be inconsistent for the same object\nexpect(JSON.stringify(doc1)).to.not.equal(JSON.stringify(doc2));\nexpect(generateKey(JSON.stringify(doc1))).to.not.equal(JSON.stringify(doc2));\nconst key1 = generateKey(doc1);\nconst key2 = generateKey(doc2);\nexpect(key1).to.equal(key2);",
              "err": {},
              "uuid": "b9237735-7be5-46ce-96b4-94dd6383eaa1",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a document",
              "fullTitle": "Document Generation Tests should generate a valid key for a document",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providedKey = 'MiRm77ENUCNp0bk40w6l+vJfZbtM14fRX/OxPqshzHA=';\nconst document = {\n  type: 'document',\n  owner: 'KsTEdLZFJn8tGeromEycmr+rhf9Ed0psqCjK9efbpBo=',\n  timestamp: '2023-08-25T12:24:29.154Z',\n  title: 'Title2',\n  content: 'Post2',\n  key: 'MiRm77ENUCNp0bk40w6l+vJfZbtM14fRX/OxPqshzHA=',\n  signature: 'pDnGNmkmJg9AV9D2NGvtjD2nLrdX9oiAQFtWhQfRE5BSvfcXq2iGSWb5lVgdTnGR306Z9BHd+jLvDvIvzFVOAg==',\n  tags: undefined,\n};\nconst { key, signature, ...content } = document;\n// console.log(key, signature, content);\n// console.log(generateKey(content));\n// content.tags = [];\n// console.log(generateKey(content));\nexpect(key).to.equal(providedKey);\nexpect(generateKey(content)).to.equal(providedKey);\nexpect(isValidKeyFormat(key)).to.be.true;\nexpect(isValidKeyForItem(key, document)).to.be.true;",
              "err": {},
              "uuid": "6e9f1629-d0db-4e69-b5c0-8dc839dadff7",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a document",
              "fullTitle": "Document Generation Tests should generate a valid key for a document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const document = {\n  type: 'document',\n  owner: generateKey('random'),\n  timestamp: new Date().toISOString(),\n  title: 'Title',\n  content: 'Post',\n  tags: [],\n  // signature: null,\n};\ndocument.key = generateKey(document);\n// sign the new document\ndocument.signature = '12345';\nconst { key, signature, ...content } = document;\n// console.log(key, signature, content);\nexpect(key).to.equal(generateKey(content));",
              "err": {},
              "uuid": "ba103e6d-4227-492b-92bd-5ffddea795c2",
              "parentUUID": "4b7ff423-a7ea-4473-84d0-0373af4b8b0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47980db1-a9e4-4d4e-b741-d5c43cbcbd5a",
            "738f096c-6658-4229-941c-8e61b02746f2",
            "b932f718-9cc4-49c4-bffe-18c79e1a22c0",
            "36cf10ff-51ff-427f-ad94-d278c7dc7900",
            "015a03c4-1fa7-4e04-915b-467564598077",
            "a260eb21-52df-4a76-a37d-a7fbce1b80b6",
            "ef701c5a-2962-4c70-959d-0a4494364c99",
            "08925435-e176-4cfb-b8c7-b87c8caacde4",
            "b9237735-7be5-46ce-96b4-94dd6383eaa1",
            "6e9f1629-d0db-4e69-b5c0-8dc839dadff7",
            "ba103e6d-4227-492b-92bd-5ffddea795c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c634d1f-b373-4ee8-af59-df0a183996f1",
          "title": "Feed Generation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/utils.test.js",
          "file": "/tests/utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should generate a random feed with valid parameters",
              "fullTitle": "Feed Generation Tests should generate a random feed with valid parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const feed = generateRandomFeed();\nexpect(feed).to.be.an('object');\nexpect(feed).to.have.property('type');\nexpect(feed.type).to.equal('feed');\nexpect(feed).to.have.property('owner');\nexpect(feed.owner).to.be.a('string');\nexpect(feed.owner).to.match(keyRegex);\nexpect(feed).to.have.property('timestamp');",
              "err": {},
              "uuid": "fef185b4-7e26-48d6-aa19-6f44db75003b",
              "parentUUID": "9c634d1f-b373-4ee8-af59-df0a183996f1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fef185b4-7e26-48d6-aa19-6f44db75003b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
          "title": "Key Generation / Validation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/utils.test.js",
          "file": "/tests/utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should generate a valid key by hashing an object",
              "fullTitle": "Key Generation / Validation Tests should generate a valid key by hashing an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = {\n  type: 'document',\n  id: '1234567890123456',\n  owner: '1234567890123456',\n};\nconst key = generateKey(object);\nexpect(key).to.equal('HOZB/B/8I3/2cWUtyae4nPv1vX7KjCZnOCV7iwrhJlI=');\nexpect(key).to.be.a('string');\nexpect(key).to.have.lengthOf(44);\nexpect(key).to.match(keyRegex);\n// const { error } = keyRegex.validate(key);\n// expect(error).to.be.undefined;",
              "err": {},
              "uuid": "9a497a9b-9375-4e90-b459-202200073d17",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate a valid key format",
              "fullTitle": "Key Generation / Validation Tests should validate a valid key format",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Generate a collection of random valid keys\nconst validKeys = [];\nfor (let i = 0; i < 10; i += 1) {\n  validKeys[i] = generateKey(generateRandomDocument());\n}\nvalidKeys.forEach((key) => {\n  expect(key).to.be.a('string');\n  expect(key).to.have.lengthOf(44);\n  expect(key).to.match(keyRegex);\n  expect(isValidKeyFormat(key)).to.be.true;\n});",
              "err": {},
              "uuid": "3b9580b0-218a-44e8-b197-c19fe7c8ca1b",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate an invalid key format",
              "fullTitle": "Key Generation / Validation Tests should not validate an invalid key format",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidKeys = [\n  'invalid',\n  '12345',\n  12345,\n  { key: '1ud321KDwz6ZFuK9gi0lrr4tIt0TFXR4TR5VCJcukeE=' },\n  // '1ud321KDwz6ZFuK9gi0lrr4tIt0TFXR4TR5VCJcuke',\n  // '1ud321KDwz6ZFuK9gi0lrr4tIt0TFXR4TR5VCJcukeeee',\n];\ninvalidKeys.forEach((key) => {\n  expect(isValidKeyFormat(key)).to.be.false;\n});",
              "err": {},
              "uuid": "2e35d769-57d7-44ca-89c8-b45da74d829c",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate a valid key for an item",
              "fullTitle": "Key Generation / Validation Tests should validate a valid key for an item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f256dd72-7c8f-4d55-b909-b0466141422d",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate an invalid key for an item",
              "fullTitle": "Key Generation / Validation Tests should not validate an invalid key for an item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a83ffa35-4b72-4364-85f3-b4eb32bdc4ea",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a consistent key for the same data",
              "fullTitle": "Key Generation / Validation Tests should generate a consistent key for the same data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4a3ef844-2da3-42e1-9d5f-6950b693c8c8",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a different key for different data",
              "fullTitle": "Key Generation / Validation Tests should generate a different key for different data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8daeb224-3565-424e-a27d-bf49285f48fa",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the same key for different object with same data",
              "fullTitle": "Key Generation / Validation Tests should generate the same key for different object with same data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2ae87caa-f4c5-4481-82a6-b8d80a131f71",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the same key for same object with different parameter order",
              "fullTitle": "Key Generation / Validation Tests should generate the same key for same object with different parameter order",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9ae6187a-fbac-402d-9136-1b8031b32fba",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a document",
              "fullTitle": "Key Generation / Validation Tests should generate a valid key for a document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b834b664-e272-415c-bcc6-30d7642feec3",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a user",
              "fullTitle": "Key Generation / Validation Tests should generate a valid key for a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "835be354-d6cf-48b5-9923-03c944473bb5",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a feed",
              "fullTitle": "Key Generation / Validation Tests should generate a valid key for a feed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "bd44805b-87fd-4f88-85bf-d21d4de3ad73",
              "parentUUID": "5ac6374f-49a2-4ecc-8abe-809bf547dd2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a497a9b-9375-4e90-b459-202200073d17",
            "3b9580b0-218a-44e8-b197-c19fe7c8ca1b",
            "2e35d769-57d7-44ca-89c8-b45da74d829c",
            "f256dd72-7c8f-4d55-b909-b0466141422d",
            "a83ffa35-4b72-4364-85f3-b4eb32bdc4ea",
            "4a3ef844-2da3-42e1-9d5f-6950b693c8c8",
            "8daeb224-3565-424e-a27d-bf49285f48fa",
            "2ae87caa-f4c5-4481-82a6-b8d80a131f71",
            "9ae6187a-fbac-402d-9136-1b8031b32fba",
            "b834b664-e272-415c-bcc6-30d7642feec3",
            "835be354-d6cf-48b5-9923-03c944473bb5",
            "bd44805b-87fd-4f88-85bf-d21d4de3ad73"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "88e84d04-6449-41b5-9962-d0e625afc58e",
          "title": "Document Validation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/validation.document.test.js",
          "file": "/tests/validation.document.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate a valid document",
              "fullTitle": "Document Validation Tests should validate a valid document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "3561c883-58f3-40e3-b718-3d551876c801",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid type",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.type = 'invalid';\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "9f3ef16b-6e51-4461-a224-f3b096f88d7d",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid id",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.id = 'invalid';\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "41c1c3f1-5ccb-44de-9933-707811adf933",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid owner",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid owner",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.owner = 'invalid';\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "3352d85b-d343-4a0e-bb31-29f46206b192",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid timestamp",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid timestamp",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.timestamp = 'invalid';\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "e1d6def1-2dd4-477b-9ea1-ea46bf62989e",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid title",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid title",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.title = 123;\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "c8562f6d-f91b-4b31-b4e3-7c58d9f71d13",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid content (int)",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid content (int)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.content = 123;\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "5bd74c72-80cd-45bd-a6a7-472e04173b3f",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with invalid tags (int)",
              "fullTitle": "Document Validation Tests should not validate a document with invalid tags (int)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.tags = 123;\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "875242ba-0af9-4eba-b55d-4620e818dbd7",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with invalid tags (int in array)",
              "fullTitle": "Document Validation Tests should not validate a document with invalid tags (int in array)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.tags = [123];\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "16026e1a-ae0d-4966-af0f-040086a02448",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with invalid tags (object in array)",
              "fullTitle": "Document Validation Tests should not validate a document with invalid tags (object in array)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.tags = [{ invalid: true }];\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "77d666a8-8022-4aa5-9668-9ed34714bead",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with invalid tags (mixed types)",
              "fullTitle": "Document Validation Tests should not validate a document with invalid tags (mixed types)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.tags = ['invalid', 123];\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "80eec8bf-a201-4fbe-8daf-48f4f7d463c8",
              "parentUUID": "88e84d04-6449-41b5-9962-d0e625afc58e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3561c883-58f3-40e3-b718-3d551876c801",
            "9f3ef16b-6e51-4461-a224-f3b096f88d7d",
            "41c1c3f1-5ccb-44de-9933-707811adf933",
            "3352d85b-d343-4a0e-bb31-29f46206b192",
            "e1d6def1-2dd4-477b-9ea1-ea46bf62989e",
            "c8562f6d-f91b-4b31-b4e3-7c58d9f71d13",
            "5bd74c72-80cd-45bd-a6a7-472e04173b3f",
            "875242ba-0af9-4eba-b55d-4620e818dbd7",
            "16026e1a-ae0d-4966-af0f-040086a02448",
            "77d666a8-8022-4aa5-9668-9ed34714bead",
            "80eec8bf-a201-4fbe-8daf-48f4f7d463c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9d3a9305-6033-43d1-9c88-c57a6713bc9b",
          "title": "Feed Validation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/validation.feed.test.js",
          "file": "/tests/validation.feed.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate a valid feed",
              "fullTitle": "Feed Validation Tests should validate a valid feed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const feed = generateRandomFeed(); // Function tested in utils tests\nconst { error } = feedSchema.validate(feed);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "6c17c329-670f-48e6-939c-69c3c2891616",
              "parentUUID": "9d3a9305-6033-43d1-9c88-c57a6713bc9b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c17c329-670f-48e6-939c-69c3c2891616"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
          "title": "User Validation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/validation.user.test.js",
          "file": "/tests/validation.user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate a valid user with all fields correct",
              "fullTitle": "User Validation Tests should validate a valid user with all fields correct",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nconst { error } = userSchema.validate(user);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "a740b7ab-326e-49d2-941f-7a71d3e346b9",
              "parentUUID": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate a valid user with \"optional\" fields null",
              "fullTitle": "User Validation Tests should validate a valid user with \"optional\" fields null",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.lastAddress = null;\nuser.lastSeen = null;\nuser.nickname = null;\nconst { error } = userSchema.validate(user);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "25b9d7ce-d981-4035-9d2f-2c2194c9e2e5",
              "parentUUID": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a valid user with empty \"optional\" parameters",
              "fullTitle": "User Validation Tests should not validate a valid user with empty \"optional\" parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nconst invalidUser = {\n  type: user.type,\n  publicKey: user.publicKey,\n  nickname: '',\n  lastSeen: '',\n  lastFeed: '',\n};\nconst { error } = userSchema.validate(invalidUser);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "2385f9ab-bc8b-4aa2-9bec-2ef12dba84c7",
              "parentUUID": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a valid user with parameters not defined",
              "fullTitle": "User Validation Tests should not validate a valid user with parameters not defined",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\n// for each key in the user object, delete it and test validation\nObject.keys(user).forEach((key) => {\n  const invalidUser = { ...user };\n  delete invalidUser[key];\n  const { error } = userSchema.validate(invalidUser);\n  expect(error).to.not.be.undefined;\n});",
              "err": {},
              "uuid": "b7c9e7d1-ceee-4a2e-8e2b-6167e38ebeb9",
              "parentUUID": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a user with an invalid type",
              "fullTitle": "User Validation Tests should not validate a user with an invalid type",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.type = 'invalid';\nconst { error } = userSchema.validate(user);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "d05d75d3-1458-406c-9ffb-b570d7f2d00f",
              "parentUUID": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a user with an invalid public key",
              "fullTitle": "User Validation Tests should not validate a user with an invalid public key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.publicKey = 'invalid';\nconst { error } = userSchema.validate(user);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "83b5ca6a-55f3-4cd5-8ba0-f24807e6cad0",
              "parentUUID": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a user with an invalid public key",
              "fullTitle": "User Validation Tests should not validate a user with an invalid public key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.publicKey = 123;\nconst { error } = userSchema.validate(user);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "0bd4428d-2418-45b9-b229-2cd691c1e936",
              "parentUUID": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a user with an invalid nickname",
              "fullTitle": "User Validation Tests should not validate a user with an invalid nickname",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.nickname = 1;\nconst { error } = userSchema.validate(user);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "fc23b2e1-ba30-46f6-85d7-2a810692cb66",
              "parentUUID": "b4c2ea48-c629-4a42-aa3e-e5bdd52ab7ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a740b7ab-326e-49d2-941f-7a71d3e346b9",
            "25b9d7ce-d981-4035-9d2f-2c2194c9e2e5",
            "2385f9ab-bc8b-4aa2-9bec-2ef12dba84c7",
            "b7c9e7d1-ceee-4a2e-8e2b-6167e38ebeb9",
            "d05d75d3-1458-406c-9ffb-b570d7f2d00f",
            "83b5ca6a-55f3-4cd5-8ba0-f24807e6cad0",
            "0bd4428d-2418-45b9-b229-2cd691c1e936",
            "fc23b2e1-ba30-46f6-85d7-2a810692cb66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}