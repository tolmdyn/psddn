{
  "stats": {
    "suites": 19,
    "tests": 112,
    "passes": 112,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-30T12:42:28.071Z",
    "end": "2023-09-30T12:42:54.850Z",
    "duration": 26779,
    "testsRegistered": 112,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7c942096-a150-42de-ae31-33998f4426de",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 2012,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.timeout(5000);\n// Set Up Bootstrap app instance as a separate process (because it isnt a module yet)\n// Rather than using ipc messages, we could pass command line params...\ncreateBootstrapApp();\n// Set up DHT Bootstrap\ncreateDHTBootstrap();\n// wait for it to init\nsetTimeout(() => {\n  done();\n}, 2000);",
          "err": {},
          "uuid": "119cf48e-522d-4f6f-a3db-774fde4794d3",
          "parentUUID": "7c942096-a150-42de-ae31-33998f4426de",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "",
          "err": {},
          "uuid": "c39ace85-4721-43f5-9a0b-4f73563f7298",
          "parentUUID": "7c942096-a150-42de-ae31-33998f4426de",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "destroyBootstrapApp();\ndestroyDHTBootstrap();\ntry {\n  fs.unlinkSync(databasePath);\n} catch {\n  console.log('No test database to delete');\n}\n// It's not great but some of the tests can hang...\n// process.exit();",
          "err": {},
          "uuid": "d459d5c8-7b8e-4900-869e-e3c5d8b6c662",
          "parentUUID": "7c942096-a150-42de-ae31-33998f4426de",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "",
          "err": {},
          "uuid": "305468f4-7cd2-41a0-836b-eec9d6943b21",
          "parentUUID": "7c942096-a150-42de-ae31-33998f4426de",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "9d74caf2-e398-48ef-98e6-ad3b1f0d6062",
          "title": "App Initialisation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should initialise the application without errors",
              "fullTitle": "App Initialisation Tests should initialise the application without errors",
              "timedOut": false,
              "duration": 1073,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000);\nconst options = {\n  port: 9091,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Init Test Node',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nsetTimeout(() => {\n  testApp.shutdown();\n  done();\n}, 1000);",
              "err": {},
              "uuid": "59e1f617-df04-4b31-bb07-f66593fe2521",
              "parentUUID": "9d74caf2-e398-48ef-98e6-ad3b1f0d6062",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should connect to bootstrap node",
              "fullTitle": "App Initialisation Tests should connect to bootstrap node",
              "timedOut": false,
              "duration": 3056,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000);\nconst options = {\n  port: 9092,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Bootstrap Test Node',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nsetTimeout(() => {\n  const cache = testApp.client.getCache();\n  expect(cache).to.be.a('Map');\n  expect(cache.size).to.equal(1);\n  const [value] = [...cache.values()];\n  expect(value).to.be.an('object');\n  expect(value.lastAddress).to.be.an('object');\n  expect(value.lastAddress.port).to.equal(9090);\n  testApp.shutdown();\n  done();\n}, 3000);",
              "err": {},
              "uuid": "25471add-7ca1-4c42-a4f8-bd94049dc116",
              "parentUUID": "9d74caf2-e398-48ef-98e6-ad3b1f0d6062",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59e1f617-df04-4b31-bb07-f66593fe2521",
            "25471add-7ca1-4c42-a4f8-bd94049dc116"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c0749ca-1f77-4cef-a0a3-0260d6c92117",
          "title": "App User Session Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new anon user account for headless mode",
              "fullTitle": "App User Session Tests should create a new anon user account for headless mode",
              "timedOut": false,
              "duration": 1053,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\nconst options = {\n  port: 9091,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'UserNode1',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\n// expect\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.type).to.equal('userProfile');\nexpect(profile.userObject).to.be.an('object');\nexpect(profile.userObject.type).to.equal('user');\nsetTimeout(() => {\n  testApp.shutdown();\n  done();\n}, 1000);",
              "err": {},
              "uuid": "17ecf523-554e-4205-841a-d830d5b64e89",
              "parentUUID": "9c0749ca-1f77-4cef-a0a3-0260d6c92117",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login an existing user account with the correct password",
              "fullTitle": "App User Session Tests should login an existing user account with the correct password",
              "timedOut": false,
              "duration": 1107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\n// inserting the test user profile into the database\ninsertUserProfile();\n// logging in with the test user profile\nconst options = {\n  port: 9095,\n  interface: 'none',\n  dbname: databasePath,\n  user: 'H1CtoVRCKP6c9bSLnGxnviqmiNqPJ2od46jD2it40aQ=',\n  secret: 'password',\n  name: 'UserNode2',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nsetTimeout(() => {\n  const profile = testApp.client.getProfile();\n  expect(profile).to.be.an('object');\n  expect(profile.type).to.equal('userProfile');\n  expect(profile.key).to.equal('H1CtoVRCKP6c9bSLnGxnviqmiNqPJ2od46jD2it40aQ=');\n  testApp.shutdown();\n  done();\n}, 1000);",
              "err": {},
              "uuid": "727ae9e2-2534-4cf6-9ced-09515100bfd0",
              "parentUUID": "9c0749ca-1f77-4cef-a0a3-0260d6c92117",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not login an existing user account with the incorrect password",
              "fullTitle": "App User Session Tests should not login an existing user account with the incorrect password",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const options = {\n  port: 9096,\n  interface: 'none',\n  dbname: databasePath,\n  user: 'H1CtoVRCKP6c9bSLnGxnviqmiNqPJ2od46jD2it40aQ=',\n  secret: '1234',\n  name: 'UserNode3',\n};\nconst testApp = new TestApp();\n// This should throw an error, but it doesnt percolate up to here.\n// Something to do with async zalgo...\ntestApp.init(options);\n// expect(() => testApp.init(options)).to.throw(Error);\n// However, this error is registered for some reason\nexpect(() => testApp.cache.getProfile()).to.throw(Error);\ntestApp.shutdown();\ndone();",
              "err": {},
              "uuid": "13a1daf4-a81e-4e25-926c-1d365b794351",
              "parentUUID": "9c0749ca-1f77-4cef-a0a3-0260d6c92117",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not login a non-existent user account",
              "fullTitle": "App User Session Tests should not login a non-existent user account",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const options = {\n  port: 9097,\n  interface: 'none',\n  dbname: databasePath,\n  user: 'deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdead',\n  secret: 'passwordsaregood',\n  name: 'UserNode3',\n};\nconst testApp = new TestApp();\n// expect an error...\n// expect(() => testApp.init(options)).to.throw(Error);\ntestApp.init(options);\nexpect(() => testApp.cache.getProfile()).to.throw(Error);\ntestApp.shutdown();\ndone();",
              "err": {},
              "uuid": "9bbdcef0-d4b7-4ccf-998f-3c9de8fdc771",
              "parentUUID": "9c0749ca-1f77-4cef-a0a3-0260d6c92117",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17ecf523-554e-4205-841a-d830d5b64e89",
            "727ae9e2-2534-4cf6-9ced-09515100bfd0",
            "13a1daf4-a81e-4e25-926c-1d365b794351",
            "9bbdcef0-d4b7-4ccf-998f-3c9de8fdc771"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2212,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fa35482c-4a2e-437a-bd92-6b1d25e145db",
          "title": "Client Put/Pub/New Item Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should put a new document into the database",
              "fullTitle": "Client Put/Pub/New Item Tests should put a new document into the database",
              "timedOut": false,
              "duration": 1058,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(2000);\nconst options = {\n  port: 9098,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Put Test Node 1',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nconst { key } = profile;\nconst testDocument = generateRandomDocument();\nconst response = testApp.client.putItem(testDocument);\n// console.log(response);\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Success);\nexpect(response.responseData).to.be.a('string');\nexpect(response.responseData).to.equal(`Item ${testDocument.key} inserted into database.`);\ntestApp.shutdown();\nsetTimeout(() => {\n  testApp.shutdown();\n  done();\n}, 1000);",
              "err": {},
              "uuid": "3539958b-38d2-4482-ad64-684da4882eae",
              "parentUUID": "fa35482c-4a2e-437a-bd92-6b1d25e145db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should publish a document to the network",
              "fullTitle": "Client Put/Pub/New Item Tests should publish a document to the network",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\nconst options = {\n  port: 9099,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Put Test Node 2',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nconst { key } = profile;\nconst testDocument = generateRandomDocument();\nconst response = await testApp.client.pubItem(testDocument);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(3);\nresponse.forEach((item) => {\n  expect(item).to.be.an('object');\n  expect(item.responseType).to.equal(ResponseTypes.Success);\n  expect(item.responseData).to.be.a('string');\n});\ntestApp.shutdown();\n// setTimeout(() => {\n//   testApp.shutdown();\n// }, 1000);",
              "err": {},
              "uuid": "e79f68ac-f022-4ecb-9b93-d659f7a223ef",
              "parentUUID": "fa35482c-4a2e-437a-bd92-6b1d25e145db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new document using newPost",
              "fullTitle": "Client Put/Pub/New Item Tests should create a new document using newPost",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\nconst options = {\n  port: 9100,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Put Test Node 3',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nexpect(testApp.client.getProfile()).to.be.an('object');\nconst response = await testApp.client.createNewPost('Test Title', 'Test Content', ['test', 'content']);\nsetTimeout(() => {\n  // expect(response).to.not.be.undefined;\n  expect(response).to.be.an('array');\n  expect(response.length).to.equal(3);\n  response.forEach((item) => {\n    expect(item).to.be.an('object');\n    expect(item.responseType).to.equal(ResponseTypes.Success);\n    expect(item.responseData).to.be.a('string');\n  });\n  testApp.shutdown();\n  testApp.shutdown();\n  // done();\n}, 1000);",
              "err": {},
              "uuid": "c53a28fd-98bd-498d-bfa9-65cd20975b46",
              "parentUUID": "fa35482c-4a2e-437a-bd92-6b1d25e145db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3539958b-38d2-4482-ad64-684da4882eae",
            "e79f68ac-f022-4ecb-9b93-d659f7a223ef",
            "c53a28fd-98bd-498d-bfa9-65cd20975b46"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1264,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d389fa6d-692b-43aa-a36d-667a958a50fb",
          "title": "Client Get Item Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a document from the database",
              "fullTitle": "Client Get Item Tests should get a document from the database",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(3000);\nconst options = {\n  port: 9101,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Test Node 1',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\n// const { key } = profile;\nconst testDocument = generateRandomDocument();\nconst response = await testApp.client.pubItem(testDocument);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(3);\nresponse.forEach((item) => {\n  expect(item).to.be.an('object');\n  expect(item.responseType).to.equal(ResponseTypes.Success);\n  expect(item.responseData).to.be.a('string');\n});\n// get the document from the database\nconst getItemResponse = await testApp.client.getItem(testDocument.key, Types.Document);\nexpect(getItemResponse).to.be.an('object');\nexpect(getItemResponse.responseType).to.equal(ResponseTypes.Success);\nexpect(getItemResponse.responseData).to.be.an('object');\nexpect(getItemResponse.responseData).to.deep.equal(testDocument);\ntestApp.shutdown();",
              "err": {},
              "uuid": "e6e2bc40-054e-4ac4-a7c0-9be9f67eb1bb",
              "parentUUID": "d389fa6d-692b-43aa-a36d-667a958a50fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a document from the network",
              "fullTitle": "Client Get Item Tests should get a document from the network",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst keys = await publishTestItems();\nexpect(keys).to.be.an('array');\nexpect(keys.length).to.equal(3);\n// console.log('keys:', keys);\nconst options = {\n  port: 9102,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Test Node 2',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\n// const response = await testApp.client.getItem(keys[0], Types.Document);\n// console.log('response1 :', response);\nconst promises = keys.map((key) => testApp.client.getItem(key, Types.Document));\nconst responses = await Promise.all(promises);\nresponses.forEach((response) => {\n  expect(response).to.be.an('object');\n  expect(response.responseType).to.equal(ResponseTypes.Success);\n  expect(response.responseData).to.be.an('object');\n  expect(keys).to.contain(response.responseData.key);\n  keys.splice(keys.indexOf(response.responseData.key), 1);\n});\nexpect(keys.length).to.equal(0);\ntestApp.shutdown();",
              "err": {},
              "uuid": "f2a7c58f-fff6-41b9-a4f3-80e2184cd427",
              "parentUUID": "d389fa6d-692b-43aa-a36d-667a958a50fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get an invalid request",
              "fullTitle": "Client Get Item Tests should fail to get an invalid request",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// this.timeout(5000);\nconst keys = await publishTestItems();\nexpect(keys).to.be.an('array');\nexpect(keys.length).to.equal(3);\n// console.log('keys:', keys);\nconst options = {\n  port: 9103,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Test Node 3',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\n// Invalid Key\nlet response = await testApp.client.getItem('Invalid Key', Types.Document);\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid key format.');\n// Invalid Type\nresponse = await testApp.client.getItem('WY5WipcOJZAc8GBNnSgg4sf9Ps4rHkaGZ2IT/gV9V/4=', 'Invalid Type');\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid item type.');\n// Missing Key\nresponse = await testApp.client.getItem(null, Types.Document);\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid request, missing parameters.');\n// Missing Type\nresponse = await testApp.client.getItem('WY5WipcOJZAc8GBNnSgg4sf9Ps4rHkaGZ2IT/gV9V/4=');\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid request, missing parameters.');\ntestApp.shutdown();",
              "err": {},
              "uuid": "9ff42e99-b2c1-416c-bf59-7e78f9717e17",
              "parentUUID": "d389fa6d-692b-43aa-a36d-667a958a50fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get a document not on the network",
              "fullTitle": "Client Get Item Tests should fail to get a document not on the network",
              "timedOut": false,
              "duration": 525,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst options = {\n  port: 9104,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Test Node 4',\n};\nconst testApp = new TestApp();\ntestApp.init(options);\nexpect(testApp).to.be.an('object');\nconst profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nconst document = generateRandomDocument();\nconst response = await testApp.client.getItem(document.key, Types.Document);\nexpect(response).to.be.an('object');\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Item not found in database, cache or DHT.');\ntestApp.shutdown();",
              "err": {},
              "uuid": "acbce39c-acba-4042-a219-b3e5c9f6cc77",
              "parentUUID": "d389fa6d-692b-43aa-a36d-667a958a50fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6e2bc40-054e-4ac4-a7c0-9be9f67eb1bb",
            "f2a7c58f-fff6-41b9-a4f3-80e2184cd427",
            "9ff42e99-b2c1-416c-bf59-7e78f9717e17",
            "acbce39c-acba-4042-a219-b3e5c9f6cc77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 998,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
          "title": "Client Follow/Unfollow Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Client Follow/Unfollow Tests\"",
              "fullTitle": "Client Follow/Unfollow Tests \"before all\" hook in \"Client Follow/Unfollow Tests\"",
              "timedOut": false,
              "duration": 51,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const options = {\n  port: 9105,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Follow Test Node 1',\n};\ntestApp = new TestApp();\ntestApp.init(options);",
              "err": {},
              "uuid": "2a99f9ee-ee1e-44ac-ba29-8b1c4c4ea8ed",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Client Follow/Unfollow Tests\"",
              "fullTitle": "Client Follow/Unfollow Tests \"after all\" hook in \"Client Follow/Unfollow Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testApp.shutdown();",
              "err": {},
              "uuid": "5650f063-aa9b-4a85-9c10-a100fabd9b96",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should allow following a user",
              "fullTitle": "Client Follow/Unfollow Tests should allow following a user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(0);\nconst newUser = generateRandomUser();\nconst { key } = newUser;\nconst response = testApp.client.followUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "f292b9c0-8d24-497f-a755-c29059a77cab",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow unfollowing a user",
              "fullTitle": "Client Follow/Unfollow Tests should allow unfollowing a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst key = profile.following[0];\nconst response = testApp.client.unfollowUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(0);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(0);",
              "err": {},
              "uuid": "599cffc3-442b-4935-9440-7db554949c21",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow following a user twice",
              "fullTitle": "Client Follow/Unfollow Tests should not allow following a user twice",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(0);\nconst newUser = generateRandomUser();\nconst { key } = newUser;\nlet response = testApp.client.followUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nresponse = testApp.client.followUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "3989ead0-35f3-41ea-a3bb-0ff2f0685b9f",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow following an invalid user key",
              "fullTitle": "Client Follow/Unfollow Tests should not allow following an invalid user key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst key = 'Invalid Key';\nconst response = testApp.client.followUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "b8aff1be-74bb-4b7b-ae2d-1b4d97737180",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow unfollowing an invalid user key",
              "fullTitle": "Client Follow/Unfollow Tests should not allow unfollowing an invalid user key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst key = 'Invalid Key';\nconst response = testApp.client.unfollowUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "693d217d-eebb-4921-87fd-2ed212bd55b3",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not error unfollowing a valid but non-followed user",
              "fullTitle": "Client Follow/Unfollow Tests should not error unfollowing a valid but non-followed user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst newUser = generateRandomUser();\nconst { key } = newUser;\nconst response = testApp.client.unfollowUser(key);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "de0077b2-8799-4b3e-b87a-351bed22d54e",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow following a null user key",
              "fullTitle": "Client Follow/Unfollow Tests should not allow following a null user key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst response = testApp.client.followUser(null);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "c7be4eca-dad4-48a4-9f9e-4be9974c2854",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow unfollowing a null user key",
              "fullTitle": "Client Follow/Unfollow Tests should not allow unfollowing a null user key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let profile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);\nconst response = testApp.client.unfollowUser(null);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nprofile = testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(1);",
              "err": {},
              "uuid": "7c85f0fe-5c10-4d88-800a-439688f7b315",
              "parentUUID": "f351df90-63aa-4401-9aba-5239a8dfc3e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f292b9c0-8d24-497f-a755-c29059a77cab",
            "599cffc3-442b-4935-9440-7db554949c21",
            "3989ead0-35f3-41ea-a3bb-0ff2f0685b9f",
            "b8aff1be-74bb-4b7b-ae2d-1b4d97737180",
            "693d217d-eebb-4921-87fd-2ed212bd55b3",
            "de0077b2-8799-4b3e-b87a-351bed22d54e",
            "c7be4eca-dad4-48a4-9f9e-4be9974c2854",
            "7c85f0fe-5c10-4d88-800a-439688f7b315"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "26ae2843-0f08-4d22-a2f7-1625dafc8eac",
          "title": "Client Get Followed Items Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/app.test.js",
          "file": "/tests/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Client Get Followed Items Tests\"",
              "fullTitle": "Client Get Followed Items Tests \"before all\" hook in \"Client Get Followed Items Tests\"",
              "timedOut": false,
              "duration": 1040,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\n// create a new user profile\nconst options = [];\n// A user which saves documents to the database only\noptions.push({\n  port: 9101,\n  interface: 'none',\n  dbname: 'tests/data/app_test_database.db',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Followed Items Test Node 1',\n  noDHT: true, // not yet implemented\n});\n// A user which sends to cache only\noptions.push({\n  port: 9102,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Followed Items Test Node 2',\n  noDHT: true, // not yet implemented\n});\n// A user which only sends to dht\noptions.push({\n  port: 9103,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'Get Followed Items Test Node 3',\n});\nlet app = new TestApp();\napp.init(options[0]);\napp.client.createNewPost('Post One', 'Content One', ['test', 'content']);\nawait app.client.createNewPost('Post Two', 'Content Two', ['test', 'content']);\nkeys.push(app.client.getProfile().userObject.key);\napp.shutdown();\napp = new TestApp();\napp.init(options[1]);\nawait app.client.createNewPost('Post Three', 'Content Three', ['test', 'content']);\nawait app.client.createNewPost('Post Four', 'Content Four', ['test', 'content']);\nkeys.push(app.client.getProfile().userObject.key);\napp.shutdown();\napp = new TestApp();\napp.init(options[2]);\nawait app.client.createNewPost('Post Five', 'Content Five', ['test', 'content']);\nawait app.client.createNewPost('Post Six', 'Content Six', ['test', 'content']);\nkeys.push(app.client.getProfile().userObject.key);\napp.shutdown();",
              "err": {},
              "uuid": "ed28e903-9c06-44b5-bdae-345f4d5a8b1a",
              "parentUUID": "26ae2843-0f08-4d22-a2f7-1625dafc8eac",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Client Get Followed Items Tests\"",
              "fullTitle": "Client Get Followed Items Tests \"after all\" hook in \"Client Get Followed Items Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "145bbd11-8ffe-42d7-9468-fdcd84e9fb65",
              "parentUUID": "26ae2843-0f08-4d22-a2f7-1625dafc8eac",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get followed items from the database",
              "fullTitle": "Client Get Followed Items Tests should get followed items from the database",
              "timedOut": false,
              "duration": 1077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst followOptions = {\n  port: 9104,\n  interface: 'none',\n  dbname: './tests/data/app_test_database.db',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Followed Items Test Node 4',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\n// console.log('testApp:', testApp);\nconst profile = await testApp.client.getProfile();\nexpect(profile).to.be.an('object');\nexpect(profile.following.length).to.equal(3);\nconst response = await testApp.client.getFollowedDocuments();\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(6);\nresponse.forEach((item) => {\n  expect(item).to.be.an('object');\n  expect(item.type).to.equal(Types.Document);\n});\ntestApp.shutdown();",
              "err": {},
              "uuid": "1d229f18-7bf0-4f3a-a318-d04035ddd6fa",
              "parentUUID": "26ae2843-0f08-4d22-a2f7-1625dafc8eac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followed items from the cache",
              "fullTitle": "Client Get Followed Items Tests should get followed items from the cache",
              "timedOut": false,
              "duration": 1068,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000);\nconst followOptions = {\n  port: 9105,\n  interface: 'none',\n  dbname: ':memory:',\n  bootstrap: './tests/scripts/bootstrapTesting.json',\n  name: 'Get Followed Items Test Node 5',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\nconst response = await testApp.client.getFollowedDocuments();\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(6);\nsetTimeout(() => {\n  testApp.shutdown();\n}, 1000);",
              "err": {},
              "uuid": "28db40a0-d8a6-44f1-8748-f2763608cda6",
              "parentUUID": "26ae2843-0f08-4d22-a2f7-1625dafc8eac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get followed items from the dht",
              "fullTitle": "Client Get Followed Items Tests should get followed items from the dht",
              "timedOut": false,
              "duration": 1012,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst followOptions = {\n  port: 9106,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'Get Followed Items Test Node 6',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\nconst response = await testApp.client.getFollowedDocuments();\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(6);\ntestApp.shutdown();\nsetTimeout(() => {\n  testApp.shutdown();\n}, 2000);",
              "err": {},
              "uuid": "26cf410b-fa42-4d6a-b551-70a86acc2ed9",
              "parentUUID": "26ae2843-0f08-4d22-a2f7-1625dafc8eac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a slice of followed items",
              "fullTitle": "Client Get Followed Items Tests should get a slice of followed items",
              "timedOut": false,
              "duration": 1067,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(7000);\nconst followOptions = {\n  port: 9107,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'Get Followed Items Test Node 7',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\nconst response = await testApp.client.getSomeFollowedDocuments(5, 2);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(1);\nsetTimeout(() => {\n  testApp.shutdown();\n}, 2000);",
              "err": {},
              "uuid": "18bcb11c-c114-4f21-985b-b9a0c442413f",
              "parentUUID": "26ae2843-0f08-4d22-a2f7-1625dafc8eac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a slice of followed items without errors",
              "fullTitle": "Client Get Followed Items Tests should get a slice of followed items without errors",
              "timedOut": false,
              "duration": 941,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(7000);\nconst followOptions = {\n  port: 9108,\n  interface: 'none',\n  dbname: ':memory:',\n  name: 'Get Followed Items Test Node 8',\n};\nconst testApp = new TestApp();\ntestApp.init(followOptions);\nkeys.forEach((key) => {\n  testApp.client.followUser(key);\n});\nconst response = await testApp.client.getSomeFollowedDocuments(6, 2);\nexpect(response).to.be.an('array');\nexpect(response.length).to.equal(0);\ntestApp.shutdown();",
              "err": {},
              "uuid": "a127433a-1007-4b7f-8514-5427ff83670d",
              "parentUUID": "26ae2843-0f08-4d22-a2f7-1625dafc8eac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d229f18-7bf0-4f3a-a318-d04035ddd6fa",
            "28db40a0-d8a6-44f1-8748-f2763608cda6",
            "26cf410b-fa42-4d6a-b551-70a86acc2ed9",
            "18bcb11c-c114-4f21-985b-b9a0c442413f",
            "a127433a-1007-4b7f-8514-5427ff83670d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5165,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "589c8fae-d03e-4a2d-b6ce-1ef06a6ca547",
          "title": "Login Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login and create a new user",
              "fullTitle": "Login Tests should login and create a new user",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\n// console.log('userProfile: ', userProfile);\n// console.log('secretKey: ', secretKey);\nexpect(userProfile).to.be.an('object');\nconst { errorProf } = userProfileSchema.validate(userProfile);\nexpect(errorProf).to.be.undefined;\nconst user = userProfile.userObject;\n// console.log('user: ', user);\nconst { errorUser } = userSchema.validate(user);\nexpect(errorUser).to.be.undefined;\nexpect(userProfile.key.length).to.equal(44);\nexpect(userProfile.secretKey.length).to.not.be.undefined;\nexpect(secretKey).to.be.a('string');\nexpect(secretKey).to.match(longKeyRegex);",
              "err": {},
              "uuid": "b1681514-562b-4620-8560-2bfd646b35fa",
              "parentUUID": "589c8fae-d03e-4a2d-b6ce-1ef06a6ca547",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login an existing user",
              "fullTitle": "Login Tests should login an existing user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// todo",
              "err": {},
              "uuid": "d6182aff-c920-4980-83d8-f7ee66cf959d",
              "parentUUID": "589c8fae-d03e-4a2d-b6ce-1ef06a6ca547",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1681514-562b-4620-8560-2bfd646b35fa",
            "d6182aff-c920-4980-83d8-f7ee66cf959d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 58,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "71134028-2eaa-40d5-ab67-c89147d684f0",
          "title": "User Session Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should set the userSession key and profile on new user login",
              "fullTitle": "User Session Tests should set the userSession key and profile on new user login",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst sessionUserKey = auth.getUserSessionKey();\nexpect(sessionUserKey).to.not.be.undefined;\nexpect(sessionUserKey).to.be.a('string');\nexpect(sessionUserKey).to.match(keyRegex);\nexpect(sessionUserKey).to.equal(userProfile.key);\nconst sessionUserProfile = auth.getUserSessionProfile();\nexpect(sessionUserProfile).to.not.be.undefined;\nexpect(sessionUserProfile).to.be.an('object');\nexpect(sessionUserProfile).to.deep.equal(userProfile);",
              "err": {},
              "uuid": "39354ac9-184c-4da4-a701-8b00640f10cc",
              "parentUUID": "71134028-2eaa-40d5-ab67-c89147d684f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39354ac9-184c-4da4-a701-8b00640f10cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 49,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dcce4a8b-a268-4e1d-b54b-f7baa1ca1d58",
          "title": "Sign/Verify Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should sign a string message",
              "fullTitle": "Sign/Verify Tests should sign a string message",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst message = 'test message';\nconst signature = auth.signStringWithKey(message, secretKey);\nexpect(signature).to.not.be.undefined;\nexpect(signature).to.be.a('string');\nexpect(signature.length).to.equal(88);\nexpect(signature).to.match(longKeyRegex);",
              "err": {},
              "uuid": "7ea23a75-3077-47d1-a3d0-ad22be70aa31",
              "parentUUID": "dcce4a8b-a268-4e1d-b54b-f7baa1ca1d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify a signed message",
              "fullTitle": "Sign/Verify Tests should verify a signed message",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst message = 'test message';\nconst signature = auth.signStringWithKey(message, secretKey);\nconst verified = auth.verifyStringSignature(message, signature, userProfile.key);\nexpect(verified).to.be.true;",
              "err": {},
              "uuid": "3bf33189-916b-415d-8507-bc5e406423fa",
              "parentUUID": "dcce4a8b-a268-4e1d-b54b-f7baa1ca1d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not verify a signed message with the wrong key",
              "fullTitle": "Sign/Verify Tests should not verify a signed message with the wrong key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// todo",
              "err": {},
              "uuid": "2644dab3-bfc0-4c1b-947b-31ce2aa0d1ca",
              "parentUUID": "dcce4a8b-a268-4e1d-b54b-f7baa1ca1d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not verify a signed message with the wrong message",
              "fullTitle": "Sign/Verify Tests should not verify a signed message with the wrong message",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// todo",
              "err": {},
              "uuid": "6f25db2c-8e04-4483-abba-47245d74f285",
              "parentUUID": "dcce4a8b-a268-4e1d-b54b-f7baa1ca1d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sign a document string",
              "fullTitle": "Sign/Verify Tests should sign a document string",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst testDocument = generateRandomDocument();\n// console.log(testDocument);\n// unpack the item and stringify\nconst { signature: sig, ...itemContent } = testDocument;\nconst itemString = JSON.stringify(itemContent);\n// console.log('itemString', itemString, 'sig', sig);\nconst signature = auth.signStringWithKey(itemString, secretKey);\n// console.log('Document sig:', signature);\nexpect(signature).to.not.be.undefined;\nexpect(signature).to.be.a('string');\nexpect(signature.length).to.equal(88);\nexpect(signature).to.match(longKeyRegex);",
              "err": {},
              "uuid": "c62feaad-a68f-4abb-bee3-084f26c7f2ab",
              "parentUUID": "dcce4a8b-a268-4e1d-b54b-f7baa1ca1d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should stringify and sign a document object",
              "fullTitle": "Sign/Verify Tests should stringify and sign a document object",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { userProfile, secretKey } = auth.authNewUser('testUser', 'testPassword');\nconst testDocument = generateRandomDocument();\n// console.log(testDocument);\n// unpack the item and stringify\nconst signature = auth.signItem(testDocument, secretKey);\n// console.log('Document Sig:', signature);\nexpect(signature).to.not.be.undefined;\nexpect(signature).to.be.a('string');\nexpect(signature.length).to.equal(88);\nexpect(signature).to.match(longKeyRegex);",
              "err": {},
              "uuid": "71b0f6c1-040c-4dac-bdb2-fc76f07b462b",
              "parentUUID": "dcce4a8b-a268-4e1d-b54b-f7baa1ca1d58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ea23a75-3077-47d1-a3d0-ad22be70aa31",
            "3bf33189-916b-415d-8507-bc5e406423fa",
            "2644dab3-bfc0-4c1b-947b-31ce2aa0d1ca",
            "6f25db2c-8e04-4483-abba-47245d74f285",
            "c62feaad-a68f-4abb-bee3-084f26c7f2ab",
            "71b0f6c1-040c-4dac-bdb2-fc76f07b462b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 220,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c87d6ed1-a794-4665-ada1-cc49181934d3",
          "title": "Client Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/client.test.js",
          "file": "/tests/client.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new client instance",
              "fullTitle": "Client Tests should create a new client instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "826748d3-2225-444a-be93-b4b9d80dbbe0",
              "parentUUID": "c87d6ed1-a794-4665-ada1-cc49181934d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "826748d3-2225-444a-be93-b4b9d80dbbe0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
          "title": "Database Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/database.test.js",
          "file": "/tests/database.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Database Tests\"",
              "fullTitle": "Database Tests \"before all\" hook in \"Database Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Code to run before all tests in this test suite",
              "err": {},
              "uuid": "8f667c74-7d2a-41ae-8a76-2ff92ffbbe79",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Database Tests\"",
              "fullTitle": "Database Tests \"before each\" hook in \"Database Tests\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create an empty test database in memory before each test\ntestDB = new Database('./tests/data/test_database.db');",
              "err": {},
              "uuid": "2154f044-b424-440c-a29d-7aa360cb5216",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Database Tests\"",
              "fullTitle": "Database Tests \"after all\" hook in \"Database Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Code to run after all tests in this test suite",
              "err": {},
              "uuid": "e0e3fea2-d1ce-40d2-b74c-bb3351e1b494",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Database Tests\"",
              "fullTitle": "Database Tests \"after each\" hook in \"Database Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Close the database connection after each test\nif (testDB) {\n  testDB.closeDatabaseConnection();\n}\n// Delete the test database file, if it exists\nif (fs.existsSync('./tests/data/test_database.db')) {\n  fs.unlinkSync('./tests/data/test_database.db');\n}",
              "err": {},
              "uuid": "d1aed1d3-8bd0-4296-9774-f39c5825ec0d",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new database",
              "fullTitle": "Database Tests should create a new database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// testDB = new Database();\nexpect(testDB).to.be.an.instanceof(Database);",
              "err": {},
              "uuid": "fab2dedf-b072-40a0-9fe2-cec332995d3b",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should open database if path given and exists",
              "fullTitle": "Database Tests should open database if path given and exists",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// testDB = new Database('./tests/data/test_database.db');\nexpect(testDB).to.be.an.instanceof(Database);\nexpect(testDB.databaseHasTables()).to.be.equal(true);\nconst testDocument = generateRandomDocument();\ntestDB.put(testDocument);\ntestDB.closeDatabaseConnection();\ntestDB = new Database('./tests/data/test_database.db');\nconst retrievedDocument = testDB.get(testDocument.key, Types.Document);\nexpect(retrievedDocument).to.exist;\nexpect(retrievedDocument).to.deep.equal(testDocument);",
              "err": {},
              "uuid": "8b76dc1b-30cf-4024-b5f4-dc07c6dd2b3c",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create tables if none exist",
              "fullTitle": "Database Tests should create tables if none exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(testDB).to.be.an.instanceof(Database);\nexpect(testDB.databaseHasTables()).to.be.equal(true);",
              "err": {},
              "uuid": "62d54b97-65f9-46d7-81cf-b336bbba4c19",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create database in memory if requested",
              "fullTitle": "Database Tests should create database in memory if requested",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const memoryDB = new Database(':memory:');\nexpect(testDB).to.be.an.instanceof(Database);\nexpect(testDB.databaseHasTables()).to.be.equal(true);\nmemoryDB.closeDatabaseConnection();",
              "err": {},
              "uuid": "8113245f-bb09-49b2-9aad-0f00a5eec55d",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert a document into the database without errors",
              "fullTitle": "Database Tests should insert a document into the database without errors",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\nconst result = testDB.put(testDocument);\n// If the result is null, then the insert failed\nexpect(result).to.exist; // Ensure that result is not null\n// If the result is not an error, then the insert succeeded\nexpect(result).to.not.be.an('error'); // Ensure that result is not an error\nexpect(result.key).to.equal(testDocument.key); // Ensure that our document was inserted",
              "err": {},
              "uuid": "2fcd3e4c-6630-47f0-a6db-2a7e8fd36b3b",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert multiple documents into the database without errors",
              "fullTitle": "Database Tests should insert multiple documents into the database without errors",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocuments = [];\nfor (let i = 0; i < 30; i += 1) {\n  testDocuments.push(generateRandomDocument());\n}\ntestDocuments.forEach((document) => {\n  const result = testDB.put(document);\n  expect(result).to.exist;\n  expect(result.key).to.equal(document.key);\n});",
              "err": {},
              "uuid": "93e0c11f-053a-4a7d-adae-50e8cd40cd27",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to insert a document into the database if invalid type given",
              "fullTitle": "Database Tests should fail to insert a document into the database if invalid type given",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\ntestDocument.type = 'invalid_type';\nexpect(() => testDB.put(testDocument)).to.throw('Invalid item type.');",
              "err": {},
              "uuid": "6c1b9844-07c9-47b8-8c12-e0fb0b938321",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to insert a document into the database if invalid key given",
              "fullTitle": "Database Tests should fail to insert a document into the database if invalid key given",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\ntestDocument.key = '1234';\nexpect(() => testDB.put(testDocument)).to.throw('Key is not a valid hash for the item.');",
              "err": {},
              "uuid": "a3795e66-6ddd-45fd-9171-512abbb2f471",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to insert a document into the database if duplicate key given (item already exists)",
              "fullTitle": "Database Tests should fail to insert a document into the database if duplicate key given (item already exists)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\nconst result = testDB.put(testDocument);\nexpect(result).to.exist;\nexpect(result.key).to.equal(testDocument.key);\nexpect(() => testDB.put(testDocument)).to.throw('Key already exists in database.');",
              "err": {},
              "uuid": "cff6c1c2-a9c7-4d14-a61b-ba279d2d3d15",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a document from the database",
              "fullTitle": "Database Tests should retrieve a document from the database",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDocument = generateRandomDocument();\ntestDB.put(testDocument);\nconst retrievedDocument = testDB.get(testDocument.key, Types.Document);\nexpect(retrievedDocument).to.deep.equal(testDocument);",
              "err": {},
              "uuid": "a1594b6a-69d5-4d1c-ae49-f7ca7fd2cf0f",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw exception if bad key is given",
              "fullTitle": "Database Tests should throw exception if bad key is given",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentKey = 'non_existent_key';\nexpect(() => testDB.get(nonExistentKey, Types.Document)).to.throw('Invalid key format.');",
              "err": {},
              "uuid": "a63a96cf-2ca2-4532-bb93-1e720fc088fa",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert a valid user into the database",
              "fullTitle": "Database Tests should insert a valid user into the database",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\n// const key = testUser.key;\nconst result = testDB.put(testUser);\n// If the result is null, then the insert failed\nexpect(result).to.exist; // Ensure that result is not null\n// If the result matches the item given then success\nexpect(result.key).to.equal(testUser.key); // Ensure that our document was inserted\nexpect(result).to.deep.equal(testUser);",
              "err": {},
              "uuid": "b18afdc8-c70e-4847-bedb-009d97e92775",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a valid user from the database",
              "fullTitle": "Database Tests should get a valid user from the database",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\n// const key = testUser.publicKey;\ntestDB.put(testUser);\n// Test get function with user type\nconst retrievedUser = testDB.get(testUser.key, Types.User);\nexpect(retrievedUser).to.exist;\nexpect(retrievedUser).to.deep.equal(testUser);\n// Test the getUser helper wrapper\nconst retrievedUser2 = testDB.getUser(testUser.key);\nexpect(retrievedUser2).to.exist;\nexpect(retrievedUser2).to.deep.equal(testUser);",
              "err": {},
              "uuid": "4c8c69ab-f943-4a4a-a410-121983bfc3e9",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not insert a user into the database with wrong type",
              "fullTitle": "Database Tests should not insert a user into the database with wrong type",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestUser.type = 'invalid';\n// Should throw an Invalid item type error\nexpect(() => testDB.put(testUser)).to.throw('Invalid item type.');",
              "err": {},
              "uuid": "0cb68c88-619d-4214-bea2-dc0b4f4124ac",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not insert a user into the database with invalid key",
              "fullTitle": "Database Tests should not insert a user into the database with invalid key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestUser.key = '1234';\n// Should throw an Invalid key format error\nexpect(() => testDB.put(testUser)).to.throw('Key is not a valid hash for the item.');",
              "err": {},
              "uuid": "a005ff2c-2722-4655-923b-9a304c5e7c91",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert multiple users into the database without errors",
              "fullTitle": "Database Tests should insert multiple users into the database without errors",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keys = insertTestUsers(testDB);\nkeys.forEach((key) => {\n  const retrievedUser = testDB.getUser(key);\n  expect(retrievedUser).to.exist;\n  expect(retrievedUser.key).to.equal(key);\n});",
              "err": {},
              "uuid": "0827adb2-4cbe-42ea-b839-7372fcaf2038",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all users from the database",
              "fullTitle": "Database Tests should get all users from the database",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const keys = insertTestUsers(testDB);\nconst users = testDB.getAllUsers();\nexpect(users).to.exist;\nexpect(users).to.be.an('array');\nexpect(users.length).to.equal(30);\nusers.forEach((user) => {\n  expect(keys.includes(user.key)).to.equal(true);\n});",
              "err": {},
              "uuid": "24bca670-f724-46d3-a040-2094d22c37cf",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user in the database",
              "fullTitle": "Database Tests should update a user in the database",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestDB.put(testUser);\nconst updatedUser = { ...testUser }; // generateRandomUser();\n// updatedUser.key = testUser.key;\nupdatedUser.lastSeen = new Date().toISOString();\nconst result = testDB.updateUser(updatedUser);\nexpect(result).to.exist;\nexpect(result).to.deep.equal(updatedUser);\nconst retrievedUser = testDB.getUser(testUser.key);\nexpect(retrievedUser).to.exist;\nexpect(retrievedUser).to.deep.equal(updatedUser);",
              "err": {},
              "uuid": "0c9c4181-5595-4215-be80-276314dc2ac3",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user in the database",
              "fullTitle": "Database Tests should update a user in the database",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestUser.lastSeen = '2023-08-25T19:04:18.259Z';\ntestDB.put(testUser);\nconst updatedUser = { ...testUser };\nupdatedUser.lastSeen = '2022-08-25T10:04:18.259Z';\nconst result = testDB.updateUser(updatedUser);\nexpect(result).to.exist;\nexpect(result).to.deep.equal(testUser); // Why?\nconst retrievedUser = testDB.getUser(testUser.key);\nexpect(retrievedUser).to.exist;\nexpect(retrievedUser).to.deep.equal(testUser);",
              "err": {},
              "uuid": "4c8736cd-e418-4d09-9072-3da7f9df6ebe",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user from the database",
              "fullTitle": "Database Tests should delete a user from the database",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\ntestDB.put(testUser);\nconst result = testDB.deleteUser(testUser.key);\nexpect(result).to.exist;\nexpect(result).to.deep.equal(testUser);\nconst retrievedUser = testDB.getUser(testUser.key);\nexpect(retrievedUser).to.not.exist;",
              "err": {},
              "uuid": "bfc978fc-5a40-416e-a49f-aa8ec29de967",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when trying to delete non-existent user",
              "fullTitle": "Database Tests should throw an error when trying to delete non-existent user",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testUser = generateRandomUser();\nexpect(() => testDB.deleteUser(testUser.key)).to.throw('Item not found in database.');",
              "err": {},
              "uuid": "1bef1501-fcdb-42db-b204-164831fcc413",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert a valid feed into the database",
              "fullTitle": "Database Tests should insert a valid feed into the database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "2f631975-9af8-4b37-a2d4-44f0316deb83",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a valid feed from the database",
              "fullTitle": "Database Tests should get a valid feed from the database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "a5ef31d5-def5-4500-959e-2667cc370fe2",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should insert a valid user profile into the database",
              "fullTitle": "Database Tests should insert a valid user profile into the database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "73ed1435-4b8a-424f-8710-06b3a0ee8d57",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a valid user profile from the database",
              "fullTitle": "Database Tests should get a valid user profile from the database",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "42abe44f-dcb5-4612-99c9-20b782e7a21d",
              "parentUUID": "8dd08333-21b4-497b-b3b4-9a3dfd705da6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fab2dedf-b072-40a0-9fe2-cec332995d3b",
            "8b76dc1b-30cf-4024-b5f4-dc07c6dd2b3c",
            "62d54b97-65f9-46d7-81cf-b336bbba4c19",
            "8113245f-bb09-49b2-9aad-0f00a5eec55d",
            "2fcd3e4c-6630-47f0-a6db-2a7e8fd36b3b",
            "93e0c11f-053a-4a7d-adae-50e8cd40cd27",
            "6c1b9844-07c9-47b8-8c12-e0fb0b938321",
            "a3795e66-6ddd-45fd-9171-512abbb2f471",
            "cff6c1c2-a9c7-4d14-a61b-ba279d2d3d15",
            "a1594b6a-69d5-4d1c-ae49-f7ca7fd2cf0f",
            "a63a96cf-2ca2-4532-bb93-1e720fc088fa",
            "b18afdc8-c70e-4847-bedb-009d97e92775",
            "4c8c69ab-f943-4a4a-a410-121983bfc3e9",
            "0cb68c88-619d-4214-bea2-dc0b4f4124ac",
            "a005ff2c-2722-4655-923b-9a304c5e7c91",
            "0827adb2-4cbe-42ea-b839-7372fcaf2038",
            "24bca670-f724-46d3-a040-2094d22c37cf",
            "0c9c4181-5595-4215-be80-276314dc2ac3",
            "4c8736cd-e418-4d09-9072-3da7f9df6ebe",
            "bfc978fc-5a40-416e-a49f-aa8ec29de967",
            "1bef1501-fcdb-42db-b204-164831fcc413",
            "2f631975-9af8-4b37-a2d4-44f0316deb83",
            "a5ef31d5-def5-4500-959e-2667cc370fe2",
            "73ed1435-4b8a-424f-8710-06b3a0ee8d57",
            "42abe44f-dcb5-4612-99c9-20b782e7a21d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 333,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6b9ac8b9-019a-458b-98f0-419f20575f38",
          "title": "DHT Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/dht.test.js",
          "file": "/tests/dht.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DHT Tests\"",
              "fullTitle": "DHT Tests \"before all\" hook in \"DHT Tests\"",
              "timedOut": false,
              "duration": 1508,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\n// Code to run before all tests in this test suite\n// Check if dht is already running\n// Create a bootstrap node\ncreateDHTBootstrap();\n// Create an empty test database\n// testDB = new Database('./tests/data/test_database.db');\ntestDB = new Database(':memory:');\nDHT.setDb(testDB);\nexpect(testDB).to.be.an.instanceof(Database);\nsetTimeout(() => {\n  // Shut down the dht test node\n  done();\n}, 1500);",
              "err": {},
              "uuid": "799c0e79-af0d-4181-b599-feee89820233",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"DHT Tests\"",
              "fullTitle": "DHT Tests \"before each\" hook in \"DHT Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0a2368ce-b182-4ceb-ae93-7e7c1e92a2a7",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DHT Tests\"",
              "fullTitle": "DHT Tests \"after all\" hook in \"DHT Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Destroy the bootstrap node\ndestroyDHTBootstrap();\n// Shut down the dht test node\nDHT.shutdownDHT();\n// Close the database connection\nif (testDB) {\n  testDB.closeDatabaseConnection();\n}\n// Delete the test database file, if it exists\nif (fs.existsSync('./tests/data/test_database.db')) {\n  fs.unlinkSync('./tests/data/test_database.db');\n}",
              "err": {},
              "uuid": "86118bb9-25e3-41b0-bfdb-c33aef782d9e",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"DHT Tests\"",
              "fullTitle": "DHT Tests \"after each\" hook in \"DHT Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3c7f8084-3896-4e20-903b-0bf52ce2ae63",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should set up a dht node",
              "fullTitle": "DHT Tests should set up a dht node",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "node = DHT.initDHTNode();\nexpect(node).to.exist;",
              "err": {},
              "uuid": "e5015860-6c2b-4fb4-9734-91bc5983f94e",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail a query for non exising document",
              "fullTitle": "DHT Tests should fail a query for non exising document",
              "timedOut": false,
              "duration": 4006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst doc = generateRandomDocument();\nconst response = await DHT.queryDHT(doc.key, Types.Document);\nexpect(response).to.exist;\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Item not found in DHT.');",
              "err": {},
              "uuid": "2e2cae40-fbc8-4772-8c04-44c050556c49",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should put a document in the dht",
              "fullTitle": "DHT Tests should put a document in the dht",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst doc = generateRandomDocument();\nconst response = await DHT.storeDHT(doc.key, doc);\nexpect(response).to.exist;\nexpect(response.key).to.equal(doc.key);",
              "err": {},
              "uuid": "f4b15fd4-d862-483c-8c9d-718264b25a85",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to put a document in the dht",
              "fullTitle": "DHT Tests should fail to put a document in the dht",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst doc = generateRandomDocument();\ndoc.key = 'invalid key';\nconst response = await DHT.storeDHT(doc.key, doc);\nexpect(response).to.exist;\nexpect(response.responseType).to.equal(ResponseTypes.Error);\nexpect(response.responseData).to.equal('Invalid key.');",
              "err": {},
              "uuid": "be77b9ee-abf9-4f96-a293-acb740828bfd",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query for an existing document",
              "fullTitle": "DHT Tests should query for an existing document",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst doc = generateRandomDocument();\nconst put = await DHT.storeDHT(doc.key, doc);\nexpect(put).to.exist;\nexpect(put.key).to.equal(doc.key);\nconst response = await DHT.queryDHT(put.key, put.type);\nexpect(response).to.exist;\nexpect(response.responseType).to.equal(ResponseTypes.Success);\nexpect(response.responseData).to.deep.equal(doc);",
              "err": {},
              "uuid": "e8cd88a2-8d23-41da-9d61-c22a12413c19",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should put a lot of documents in the dht",
              "fullTitle": "DHT Tests should put a lot of documents in the dht",
              "timedOut": false,
              "duration": 2730,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nconst amount = 20;\n// generate documents\nconst docs = [];\nfor (let i = 0; i < amount; i += 1) {\n  docs.push(generateRandomDocument());\n}\n// create 100 promises\nconst promises = [];\ndocs.forEach((doc) => {\n  promises.push(DHT.storeDHT(doc.key, doc));\n});\n// wait for all promises to resolve\nconst responses = await Promise.all(promises);\n// check that all responses are valid\nresponses.forEach((response) => {\n  expect(response).to.exist;\n  expect(response.key).to.exist;\n});",
              "err": {},
              "uuid": "93b44f2f-aa03-45f4-ac52-1d8c6406c616",
              "parentUUID": "6b9ac8b9-019a-458b-98f0-419f20575f38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5015860-6c2b-4fb4-9734-91bc5983f94e",
            "2e2cae40-fbc8-4772-8c04-44c050556c49",
            "f4b15fd4-d862-483c-8c9d-718264b25a85",
            "be77b9ee-abf9-4f96-a293-acb740828bfd",
            "e8cd88a2-8d23-41da-9d61-c22a12413c19",
            "93b44f2f-aa03-45f4-ac52-1d8c6406c616"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6753,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "05d72c51-84da-4b7e-b15b-f9bf667a9a5e",
          "title": "UI Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/ui.term.test.js",
          "file": "/tests/ui.term.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new Terminal UI instance",
              "fullTitle": "UI Tests should create a new Terminal UI instance",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// TODO",
              "err": {},
              "uuid": "16b33901-b63b-4101-979c-2c78d851f01c",
              "parentUUID": "05d72c51-84da-4b7e-b15b-f9bf667a9a5e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16b33901-b63b-4101-979c-2c78d851f01c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
          "title": "Document Generation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/utils.test.js",
          "file": "/tests/utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should generate a valid document",
              "fullTitle": "Document Generation Tests should generate a valid document",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\nexpect(doc).to.be.an('object');\nexpect(doc.type).to.equal('document');\nexpect(doc.key).to.be.a('string');\nexpect(doc.owner).to.be.a('string');\nexpect(doc.owner).to.match(keyRegex);\nexpect(doc.timestamp).to.be.a('string');\nexpect(doc.title).to.be.a('string');\nexpect(doc.title).to.have.lengthOf.at.least(5);\nexpect(doc.title).to.have.lengthOf.at.most(50);\nexpect(doc.content).to.be.a('string');\nexpect(doc.content).to.have.lengthOf.at.least(5);\nexpect(doc.content).to.have.lengthOf.at.most(2000);\nexpect(doc.tags).to.be.an('array');\nexpect(doc.tags).to.have.lengthOf.at.least(0);\nexpect(doc.tags).to.have.lengthOf.at.most(5);\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "578e9564-45b7-4e40-8199-8d0ba0f54956",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a unique document",
              "fullTitle": "Document Generation Tests should generate a unique document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = generateRandomDocument();\nconst doc2 = generateRandomDocument();\nexpect(doc1).to.not.deep.equal(doc2);\nexpect(doc1.key).to.not.equal(doc2.key);\nexpect(doc1.owner).to.not.equal(doc2.owner);\nexpect(doc1.timestamp).to.not.equal(doc2.timestamp);\nexpect(doc1.title).to.not.equal(doc2.title);\n/* etc */",
              "err": {},
              "uuid": "2a2a5489-194f-4d40-b5fb-2d5002b42347",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid hash from document",
              "fullTitle": "Document Generation Tests should generate a valid hash from document",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\n// const key = doc.key;\nexpect(isValidKeyFormat(doc.key)).to.be.true;\nexpect(isValidKeyForItem(doc.key, doc)).to.be.true;",
              "err": {},
              "uuid": "d817f758-fdb4-4253-9c75-25d29f6dac89",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate an invalid document hash",
              "fullTitle": "Document Generation Tests should not validate an invalid document hash",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = generateRandomDocument();\nconst doc2 = generateRandomDocument();\n// const key = doc1.id;\nexpect(isValidKeyForItem(doc1.key, doc1)).to.be.true;\nexpect(isValidKeyForItem(doc1.key, doc2)).to.be.false;",
              "err": {},
              "uuid": "098ac86e-0b6c-4a39-9112-16319e454cd0",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not accept the wrong key for document",
              "fullTitle": "Document Generation Tests should not accept the wrong key for document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\nconst key = '123456789ABCDEF';\nexpect(isValidKeyForItem(key, doc)).to.be.false;\nexpect(isValidKeyFormat(key)).to.be.false;",
              "err": {},
              "uuid": "1656ef49-1a98-47da-b95d-89a059ff45bd",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a consistent hash for same document",
              "fullTitle": "Document Generation Tests should generate a consistent hash for same document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\n// We are hashing a generated doc so the key will not match the id\n// But key1 and key2 should be the same\nconst key1 = generateKey(doc);\nconst key2 = generateKey(doc);\nexpect(key1).to.equal(key2);\nexpect(key1).to.not.equal(key1.id);",
              "err": {},
              "uuid": "845ccc2a-ddc4-4a59-b6ba-d5c3af512d08",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a different hash for different document",
              "fullTitle": "Document Generation Tests should generate a different hash for different document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = generateRandomDocument();\nconst doc2 = generateRandomDocument();\nconst key1 = generateKey(doc1);\nconst key2 = generateKey(doc2);\nexpect(key1).to.not.equal(key2);",
              "err": {},
              "uuid": "016e25f0-d7bd-4a7c-84eb-d41eb23223e3",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the same hash for different document with same data",
              "fullTitle": "Document Generation Tests should generate the same hash for different document with same data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = generateRandomDocument();\nconst doc2 = { ...doc1 };\nconst key1 = generateKey(doc1);\nconst key2 = generateKey(doc2);\nexpect(key1).to.equal(key2);",
              "err": {},
              "uuid": "ac6ceb47-8131-4700-9340-9c8e7d5b2319",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the same hash for same object with different parameter order",
              "fullTitle": "Document Generation Tests should generate the same hash for same object with different parameter order",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc1 = {\n  type: 'document',\n  id: '1234567890123456',\n  owner: '1234567890123456',\n  timestamp: '2021-03-01T00:00:00.000Z',\n  title: 'Lorem ipsum dolor sit amet',\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.',\n  tags: ['lorem', 'ipsum', 'dolor', 'sit', 'amet'],\n  signature: null,\n};\nconst doc2 = {\n  id: '1234567890123456',\n  type: 'document',\n  owner: '1234567890123456',\n  timestamp: '2021-03-01T00:00:00.000Z',\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris.',\n  tags: ['lorem', 'ipsum', 'dolor', 'sit', 'amet'],\n  title: 'Lorem ipsum dolor sit amet',\n  signature: null,\n};\nexpect(doc1).to.deep.equal(doc2);\n// Need to test that the order of keys doesn't effect the hash function\n// Otherwise it will be inconsistent for the same object\nexpect(JSON.stringify(doc1)).to.not.equal(JSON.stringify(doc2));\nexpect(generateKey(JSON.stringify(doc1))).to.not.equal(JSON.stringify(doc2));\nconst key1 = generateKey(doc1);\nconst key2 = generateKey(doc2);\nexpect(key1).to.equal(key2);",
              "err": {},
              "uuid": "90b8ec69-99b2-497f-bb42-73b65c5f6d45",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a document",
              "fullTitle": "Document Generation Tests should generate a valid key for a document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const providedKey = 'MiRm77ENUCNp0bk40w6l+vJfZbtM14fRX/OxPqshzHA=';\nconst document = {\n  type: 'document',\n  owner: 'KsTEdLZFJn8tGeromEycmr+rhf9Ed0psqCjK9efbpBo=',\n  timestamp: '2023-08-25T12:24:29.154Z',\n  title: 'Title2',\n  content: 'Post2',\n  key: 'MiRm77ENUCNp0bk40w6l+vJfZbtM14fRX/OxPqshzHA=',\n  signature: 'pDnGNmkmJg9AV9D2NGvtjD2nLrdX9oiAQFtWhQfRE5BSvfcXq2iGSWb5lVgdTnGR306Z9BHd+jLvDvIvzFVOAg==',\n  tags: undefined,\n};\nconst { key, signature, ...content } = document;\n// console.log(key, signature, content);\n// console.log(generateKey(content));\n// content.tags = [];\n// console.log(generateKey(content));\nexpect(key).to.equal(providedKey);\nexpect(generateKey(content)).to.equal(providedKey);\nexpect(isValidKeyFormat(key)).to.be.true;\nexpect(isValidKeyForItem(key, document)).to.be.true;",
              "err": {},
              "uuid": "c10eebff-e23e-4b06-ac8e-735a31cea529",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a document",
              "fullTitle": "Document Generation Tests should generate a valid key for a document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const document = {\n  type: 'document',\n  owner: generateKey('random'),\n  timestamp: new Date().toISOString(),\n  title: 'Title',\n  content: 'Post',\n  tags: [],\n  // signature: null,\n};\ndocument.key = generateKey(document);\n// sign the new document\ndocument.signature = '12345';\nconst { key, signature, ...content } = document;\n// console.log(key, signature, content);\nexpect(key).to.equal(generateKey(content));",
              "err": {},
              "uuid": "f642471e-4383-49d4-82a2-4d01e227e88e",
              "parentUUID": "1b299f2c-b34f-4ddd-91b0-63307132cb1e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "578e9564-45b7-4e40-8199-8d0ba0f54956",
            "2a2a5489-194f-4d40-b5fb-2d5002b42347",
            "d817f758-fdb4-4253-9c75-25d29f6dac89",
            "098ac86e-0b6c-4a39-9112-16319e454cd0",
            "1656ef49-1a98-47da-b95d-89a059ff45bd",
            "845ccc2a-ddc4-4a59-b6ba-d5c3af512d08",
            "016e25f0-d7bd-4a7c-84eb-d41eb23223e3",
            "ac6ceb47-8131-4700-9340-9c8e7d5b2319",
            "90b8ec69-99b2-497f-bb42-73b65c5f6d45",
            "c10eebff-e23e-4b06-ac8e-735a31cea529",
            "f642471e-4383-49d4-82a2-4d01e227e88e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "99d9c580-02c2-4a22-8c35-cfdffcebd775",
          "title": "Feed Generation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/utils.test.js",
          "file": "/tests/utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should generate a random feed with valid parameters",
              "fullTitle": "Feed Generation Tests should generate a random feed with valid parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const feed = generateRandomFeed();\nexpect(feed).to.be.an('object');\nexpect(feed).to.have.property('type');\nexpect(feed.type).to.equal('feed');\nexpect(feed).to.have.property('owner');\nexpect(feed.owner).to.be.a('string');\nexpect(feed.owner).to.match(keyRegex);\nexpect(feed).to.have.property('timestamp');",
              "err": {},
              "uuid": "e12285d6-3610-471d-8014-e776a01aab54",
              "parentUUID": "99d9c580-02c2-4a22-8c35-cfdffcebd775",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e12285d6-3610-471d-8014-e776a01aab54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5096d6ac-e32a-472a-854a-330346416e3a",
          "title": "Key Generation / Validation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/utils.test.js",
          "file": "/tests/utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should generate a valid key by hashing an object",
              "fullTitle": "Key Generation / Validation Tests should generate a valid key by hashing an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = {\n  type: 'document',\n  id: '1234567890123456',\n  owner: '1234567890123456',\n};\nconst key = generateKey(object);\nexpect(key).to.equal('HOZB/B/8I3/2cWUtyae4nPv1vX7KjCZnOCV7iwrhJlI=');\nexpect(key).to.be.a('string');\nexpect(key).to.have.lengthOf(44);\nexpect(key).to.match(keyRegex);\n// const { error } = keyRegex.validate(key);\n// expect(error).to.be.undefined;",
              "err": {},
              "uuid": "7b68c480-50e7-4c3c-98e3-1cd2218292e3",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate a valid key format",
              "fullTitle": "Key Generation / Validation Tests should validate a valid key format",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Generate a collection of random valid keys\nconst validKeys = [];\nfor (let i = 0; i < 10; i += 1) {\n  validKeys[i] = generateKey(generateRandomDocument());\n}\nvalidKeys.forEach((key) => {\n  expect(key).to.be.a('string');\n  expect(key).to.have.lengthOf(44);\n  expect(key).to.match(keyRegex);\n  expect(isValidKeyFormat(key)).to.be.true;\n});",
              "err": {},
              "uuid": "04aa54e0-4e5c-4286-85cd-b93cc5e2a1da",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate an invalid key format",
              "fullTitle": "Key Generation / Validation Tests should not validate an invalid key format",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidKeys = [\n  'invalid',\n  '12345',\n  12345,\n  { key: '1ud321KDwz6ZFuK9gi0lrr4tIt0TFXR4TR5VCJcukeE=' },\n  // '1ud321KDwz6ZFuK9gi0lrr4tIt0TFXR4TR5VCJcuke',\n  // '1ud321KDwz6ZFuK9gi0lrr4tIt0TFXR4TR5VCJcukeeee',\n];\ninvalidKeys.forEach((key) => {\n  expect(isValidKeyFormat(key)).to.be.false;\n});",
              "err": {},
              "uuid": "76ec13d8-682b-4dd7-8917-bd4603763e02",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate a valid key for an item",
              "fullTitle": "Key Generation / Validation Tests should validate a valid key for an item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "df3df647-b4dd-4885-9e83-bab50d0ee897",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate an invalid key for an item",
              "fullTitle": "Key Generation / Validation Tests should not validate an invalid key for an item",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "40d7cde0-4a1e-48d7-8195-ae017fefedf7",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a consistent key for the same data",
              "fullTitle": "Key Generation / Validation Tests should generate a consistent key for the same data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2b49b5a3-fd6e-4d07-b8e7-91cc634f392c",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a different key for different data",
              "fullTitle": "Key Generation / Validation Tests should generate a different key for different data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e2257044-0562-4657-aa7b-30fc345ae9d6",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the same key for different object with same data",
              "fullTitle": "Key Generation / Validation Tests should generate the same key for different object with same data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "31f269fb-858b-42b7-b308-afea32664bad",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate the same key for same object with different parameter order",
              "fullTitle": "Key Generation / Validation Tests should generate the same key for same object with different parameter order",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1a501a8b-a4f0-46ae-8bca-6a81f6f1b838",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a document",
              "fullTitle": "Key Generation / Validation Tests should generate a valid key for a document",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a5b51b2f-e727-4592-8544-5427e208fcd7",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a user",
              "fullTitle": "Key Generation / Validation Tests should generate a valid key for a user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "116d0b92-9520-419f-8424-d881f257aaee",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate a valid key for a feed",
              "fullTitle": "Key Generation / Validation Tests should generate a valid key for a feed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d1b12207-4a5a-4662-a51a-0b1454766d47",
              "parentUUID": "5096d6ac-e32a-472a-854a-330346416e3a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b68c480-50e7-4c3c-98e3-1cd2218292e3",
            "04aa54e0-4e5c-4286-85cd-b93cc5e2a1da",
            "76ec13d8-682b-4dd7-8917-bd4603763e02",
            "df3df647-b4dd-4885-9e83-bab50d0ee897",
            "40d7cde0-4a1e-48d7-8195-ae017fefedf7",
            "2b49b5a3-fd6e-4d07-b8e7-91cc634f392c",
            "e2257044-0562-4657-aa7b-30fc345ae9d6",
            "31f269fb-858b-42b7-b308-afea32664bad",
            "1a501a8b-a4f0-46ae-8bca-6a81f6f1b838",
            "a5b51b2f-e727-4592-8544-5427e208fcd7",
            "116d0b92-9520-419f-8424-d881f257aaee",
            "d1b12207-4a5a-4662-a51a-0b1454766d47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
          "title": "Document Validation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/validation.document.test.js",
          "file": "/tests/validation.document.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate a valid document",
              "fullTitle": "Document Validation Tests should validate a valid document",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "867211a4-9d4d-412a-b319-6d38b5bc524d",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid type",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.type = 'invalid';\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "13ac9936-3677-46fc-94a7-a39b4c842ccc",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid id",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.id = 'invalid';\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "9c502e55-b2e3-446d-adc3-0d5b1c015c26",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid owner",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid owner",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.owner = 'invalid';\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "6913dfc1-7a6b-4aed-8d8b-89bcb51f1f30",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid timestamp",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid timestamp",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.timestamp = 'invalid';\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "806dcc90-873c-40e7-a2e4-7d66a728b72e",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid title",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid title",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.title = 123;\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "e2ce9696-412b-4412-af85-ffa6c59f4695",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with an invalid content (int)",
              "fullTitle": "Document Validation Tests should not validate a document with an invalid content (int)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.content = 123;\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "4cf93d08-8a03-48cc-9b54-6ea68516b433",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with invalid tags (int)",
              "fullTitle": "Document Validation Tests should not validate a document with invalid tags (int)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.tags = 123;\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "75a3b145-1f60-4f8d-a2cb-df15f95a4f1d",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with invalid tags (int in array)",
              "fullTitle": "Document Validation Tests should not validate a document with invalid tags (int in array)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.tags = [123];\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "7331df53-56e8-4b0b-8ee9-99859a5dafb7",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with invalid tags (object in array)",
              "fullTitle": "Document Validation Tests should not validate a document with invalid tags (object in array)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.tags = [{ invalid: true }];\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "558821f8-6008-4abe-b87e-711cf26fc429",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a document with invalid tags (mixed types)",
              "fullTitle": "Document Validation Tests should not validate a document with invalid tags (mixed types)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const doc = generateRandomDocument();\ndoc.tags = ['invalid', 123];\nconst { error } = documentSchema.validate(doc);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "ed35f688-d00a-470d-ac47-ff39d89bba90",
              "parentUUID": "40748f5e-5fbf-4aac-916a-c63ba4472a6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "867211a4-9d4d-412a-b319-6d38b5bc524d",
            "13ac9936-3677-46fc-94a7-a39b4c842ccc",
            "9c502e55-b2e3-446d-adc3-0d5b1c015c26",
            "6913dfc1-7a6b-4aed-8d8b-89bcb51f1f30",
            "806dcc90-873c-40e7-a2e4-7d66a728b72e",
            "e2ce9696-412b-4412-af85-ffa6c59f4695",
            "4cf93d08-8a03-48cc-9b54-6ea68516b433",
            "75a3b145-1f60-4f8d-a2cb-df15f95a4f1d",
            "7331df53-56e8-4b0b-8ee9-99859a5dafb7",
            "558821f8-6008-4abe-b87e-711cf26fc429",
            "ed35f688-d00a-470d-ac47-ff39d89bba90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f9f454ff-476b-4555-ad5a-db8a7af93f0a",
          "title": "Feed Validation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/validation.feed.test.js",
          "file": "/tests/validation.feed.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate a valid feed",
              "fullTitle": "Feed Validation Tests should validate a valid feed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const feed = generateRandomFeed(); // Function tested in utils tests\nconst { error } = feedSchema.validate(feed);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "ffbb18ba-9e4f-40f3-a5f2-458cabb16172",
              "parentUUID": "f9f454ff-476b-4555-ad5a-db8a7af93f0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffbb18ba-9e4f-40f3-a5f2-458cabb16172"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
          "title": "User Validation Tests",
          "fullFile": "/home/tolm/Development/CSM500 Project/psddn/tests/validation.user.test.js",
          "file": "/tests/validation.user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate a valid user with all fields correct",
              "fullTitle": "User Validation Tests should validate a valid user with all fields correct",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nconst { error } = userSchema.validate(user);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "89cc0e3b-ec53-4517-a727-9e65baac1be3",
              "parentUUID": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate a valid user with \"optional\" fields null",
              "fullTitle": "User Validation Tests should validate a valid user with \"optional\" fields null",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.lastAddress = null;\nuser.lastSeen = null;\nuser.nickname = null;\nconst { error } = userSchema.validate(user);\nexpect(error).to.be.undefined;",
              "err": {},
              "uuid": "2de43683-14d3-4642-a40c-b63a4f199d46",
              "parentUUID": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a valid user with empty \"optional\" parameters",
              "fullTitle": "User Validation Tests should not validate a valid user with empty \"optional\" parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nconst invalidUser = {\n  type: user.type,\n  publicKey: user.publicKey,\n  nickname: '',\n  lastSeen: '',\n  lastFeed: '',\n};\nconst { error } = userSchema.validate(invalidUser);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "3cb6051b-ec6e-4bbc-b437-ff36591fca0d",
              "parentUUID": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a valid user with parameters not defined",
              "fullTitle": "User Validation Tests should not validate a valid user with parameters not defined",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\n// for each key in the user object, delete it and test validation\nObject.keys(user).forEach((key) => {\n  const invalidUser = { ...user };\n  delete invalidUser[key];\n  const { error } = userSchema.validate(invalidUser);\n  expect(error).to.not.be.undefined;\n});",
              "err": {},
              "uuid": "c3002ac8-f01f-45a4-9ecb-60fa3d555cd5",
              "parentUUID": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a user with an invalid type",
              "fullTitle": "User Validation Tests should not validate a user with an invalid type",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.type = 'invalid';\nconst { error } = userSchema.validate(user);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "4e5e7e1c-6e47-432d-b388-c34dced339b7",
              "parentUUID": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a user with an invalid public key",
              "fullTitle": "User Validation Tests should not validate a user with an invalid public key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.publicKey = 'invalid';\nconst { error } = userSchema.validate(user);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "63b7f218-1fa5-4418-8598-861207e06be7",
              "parentUUID": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a user with an invalid public key",
              "fullTitle": "User Validation Tests should not validate a user with an invalid public key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.publicKey = 123;\nconst { error } = userSchema.validate(user);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "7fe2e318-9bc6-492e-bc4e-7576dd2b6887",
              "parentUUID": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not validate a user with an invalid nickname",
              "fullTitle": "User Validation Tests should not validate a user with an invalid nickname",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = generateRandomUser();\nuser.nickname = 1;\nconst { error } = userSchema.validate(user);\nexpect(error).to.not.be.undefined;",
              "err": {},
              "uuid": "e5db09c1-7eed-4d8e-8402-194466527e91",
              "parentUUID": "d5fe6ee2-bc65-453c-887b-5fe84a2a5f9b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89cc0e3b-ec53-4517-a727-9e65baac1be3",
            "2de43683-14d3-4642-a40c-b63a4f199d46",
            "3cb6051b-ec6e-4bbc-b437-ff36591fca0d",
            "c3002ac8-f01f-45a4-9ecb-60fa3d555cd5",
            "4e5e7e1c-6e47-432d-b388-c34dced339b7",
            "63b7f218-1fa5-4418-8598-861207e06be7",
            "7fe2e318-9bc6-492e-bc4e-7576dd2b6887",
            "e5db09c1-7eed-4d8e-8402-194466527e91"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}